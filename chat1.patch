diff --git a/Makefile b/Makefile
index d11b1462..b7d879f7 100644
--- a/Makefile
+++ b/Makefile
@@ -25,6 +25,9 @@ app-restart:
 server-restart:
 	docker compose -f docker-compose.dev.yml restart server
 
+caddy-rebuild:
+	docker compose -f docker-compose.dev.yml up -d caddy --build
+
 .PHONY: test
 test:
 	cd ./server && make test
diff --git a/app/.env.acceptance b/app/.env.acceptance
index 0681acab..62473356 100644
--- a/app/.env.acceptance
+++ b/app/.env.acceptance
@@ -1,4 +1,9 @@
 VITE_API_BASE_URL = "https://app.acc.clothingloop.org/api"
 VITE_ONE_SIGNAL_ID = "f1cdfd23-1133-43dd-9070-c5ad00a436ed"
 VITE_APP_VERSION = "acceptance"
-VITE_MAPBOX_KEY = pk.eyJ1IjoiZ2l1bGlhbW1sIiwiYSI6ImNrbWY1bzZyYTJuMjIyd2xheXk1cDZ5ZncifQ.FOwxpc8gGYEBUvboO_Kldw
\ No newline at end of file
+VITE_MAPBOX_KEY = pk.eyJ1IjoiZ2l1bGlhbW1sIiwiYSI6ImNrbWY1bzZyYTJuMjIyd2xheXk1cDZ5ZncifQ.FOwxpc8gGYEBUvboO_Kldw
+
+VITE_CHAT_HOST = "nakama.acc.clothingloop.org"
+VITE_CHAT_PORT = "443"
+VITE_CHAT_SERVER_KEY = "cVQyxQTdSDscjanTr7iabW9WJybWref56Zs"
+VITE_CHAT_SSL = "true"
diff --git a/app/.env.development b/app/.env.development
index 4cd46ad3..befdd13d 100644
--- a/app/.env.development
+++ b/app/.env.development
@@ -1,4 +1,9 @@
 VITE_API_BASE_URL = "/api"
 VITE_ONE_SIGNAL_ID = "f1cdfd23-1133-43dd-9070-c5ad00a436ed"
 VITE_APP_VERSION = "development"
-VITE_MAPBOX_KEY = pk.eyJ1IjoiZ2l1bGlhbW1sIiwiYSI6ImNrbWY1bzZyYTJuMjIyd2xheXk1cDZ5ZncifQ.FOwxpc8gGYEBUvboO_Kldw
\ No newline at end of file
+VITE_MAPBOX_KEY = pk.eyJ1IjoiZ2l1bGlhbW1sIiwiYSI6ImNrbWY1bzZyYTJuMjIyd2xheXk1cDZ5ZncifQ.FOwxpc8gGYEBUvboO_Kldw
+
+VITE_CHAT_HOST = "localhost"
+VITE_CHAT_PORT = "7350"
+VITE_CHAT_SERVER_KEY = "defaultkey"
+VITE_CHAT_SSL = "false"
diff --git a/app/.env.production b/app/.env.production
index 17edaabd..48f20fff 100644
--- a/app/.env.production
+++ b/app/.env.production
@@ -1,4 +1,9 @@
 VITE_API_BASE_URL = "https://app.clothingloop.org/api"
 VITE_ONE_SIGNAL_ID = "f1cdfd23-1133-43dd-9070-c5ad00a436ed"
 VITE_APP_VERSION = "v2.8"
-VITE_MAPBOX_KEY = pk.eyJ1IjoiZ2l1bGlhbW1sIiwiYSI6ImNrbWY1bzZyYTJuMjIyd2xheXk1cDZ5ZncifQ.FOwxpc8gGYEBUvboO_Kldw
\ No newline at end of file
+VITE_MAPBOX_KEY = pk.eyJ1IjoiZ2l1bGlhbW1sIiwiYSI6ImNrbWY1bzZyYTJuMjIyd2xheXk1cDZ5ZncifQ.FOwxpc8gGYEBUvboO_Kldw
+
+VITE_CHAT_HOST = "nakama.clothingloop.org"
+VITE_CHAT_PORT = "7350"
+# VITE_CHAT_SERVER_KEY = "defaultkey"
+VITE_CHAT_SSL = "true"
diff --git a/app/Caddyfile-acc b/app/Caddyfile-acc
index b5dfdd13..3cb2baf3 100644
--- a/app/Caddyfile-acc
+++ b/app/Caddyfile-acc
@@ -2,7 +2,7 @@
 	header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
 }
 :80 {
-   import hsts
+	import hsts
 	header X-Robots-Tag noindex
 
 	handle_path /api/* {
@@ -23,4 +23,16 @@
 		encode zstd gzip
 		try_files {path} /index.html
 	}
+}
+
+:81 {
+	@options {
+		method OPTIONS
+	}
+	respond @options 200
+
+	header >Access-Control-Allow-Origin "https://app.acc.clothingloop.org"
+	header >Access-Control-Allow-Methods "*"
+	header >Access-Control-Allow-Headers "Content-Type, Origin, Authorization, X-Requested-With, Accept"
+	reverse_proxy acc_nakama:7350
 }
\ No newline at end of file
diff --git a/app/Caddyfile-prod b/app/Caddyfile-prod
index 614c8b01..f50ce425 100644
--- a/app/Caddyfile-prod
+++ b/app/Caddyfile-prod
@@ -11,7 +11,7 @@
 		}
 		respond @options 200
 
-		reverse_proxy server:80
+		reverse_proxy server:8084
 		header Access-Control-Allow-Origin "*"
 		header Access-Control-Allow-Methods "*"
 		header Access-Control-Allow-Headers "Content-Type, Origin, Authorization, X-Requested-With, Accept"
diff --git a/app/package-lock.json b/app/package-lock.json
index 73436415..22b7a504 100644
--- a/app/package-lock.json
+++ b/app/package-lock.json
@@ -21,6 +21,7 @@
         "@capacitor/share": "^6.0.2",
         "@capacitor/splash-screen": "^6.0.2",
         "@capacitor/status-bar": "6.0.1",
+        "@heroiclabs/nakama-js": "^2.8.0",
         "@ionic/core": "^8.2.7",
         "@ionic/react": "^8.2.7",
         "@ionic/react-router": "^8.2.7",
@@ -29,6 +30,7 @@
         "@uidotdev/usehooks": "^2.4.1",
         "autoprefixer": "^10.4.20",
         "beautiful-react-hooks": "^5.0.2",
+        "color2k": "^2.0.3",
         "dayjs": "^1.11.13",
         "deck.gl": "^9.0.27",
         "i18next": "^23.14.0",
@@ -47,6 +49,7 @@
         "react-transition-group": "^4.4.5",
         "redaxios": "^0.5.1",
         "tailwindcss": "^3.4.10",
+        "use-debounce": "^10.0.0",
         "use-long-press": "^3.2.0"
       },
       "devDependencies": {
@@ -2857,6 +2860,18 @@
       "license": "MIT",
       "peer": true
     },
+    "node_modules/@heroiclabs/nakama-js": {
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/@heroiclabs/nakama-js/-/nakama-js-2.8.0.tgz",
+      "integrity": "sha512-E3bH/pqosASGHmVttsa708UjoLYkzZ4Sy3JUZV0TMK3oZK19QVyKrWhqjwyFwvKI2WyVf30xiRD+2ffvmfpw4A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@scarf/scarf": "^1.1.1",
+        "base64-arraybuffer": "^1.0.2",
+        "js-base64": "^3.7.4",
+        "whatwg-fetch": "^3.6.2"
+      }
+    },
     "node_modules/@hutson/parse-repository-url": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/@hutson/parse-repository-url/-/parse-repository-url-3.0.2.tgz",
@@ -4300,6 +4315,13 @@
         "win32"
       ]
     },
+    "node_modules/@scarf/scarf": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@scarf/scarf/-/scarf-1.3.0.tgz",
+      "integrity": "sha512-lHKK8M5CTcpFj2hZDB3wIjb0KAbEOgDmiJGDv1WBRfQgRm/a8/XMEkG/N1iM01xgbUDsPQwi42D+dFo1XPAKew==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0"
+    },
     "node_modules/@sindresorhus/is": {
       "version": "4.6.0",
       "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
@@ -5907,13 +5929,12 @@
       }
     },
     "node_modules/bare-stream": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/bare-stream/-/bare-stream-2.3.0.tgz",
-      "integrity": "sha512-pVRWciewGUeCyKEuRxwv06M079r+fRjAQjBEK2P6OYGrO43O+Z0LrPZZEjlc4mB6C2RpZ9AxJ1s7NLEtOHO6eA==",
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/bare-stream/-/bare-stream-2.3.1.tgz",
+      "integrity": "sha512-Vm8kAeOcfzHPTH8sq0tHBnUqYrkXdroaBVVylqFT4cF5wnMfKEIxxy2jIGu2zKVNl9P8MAP9XBWwXJ9N2+jfEw==",
       "license": "Apache-2.0",
       "optional": true,
       "dependencies": {
-        "b4a": "^1.6.6",
         "streamx": "^2.20.0"
       }
     },
@@ -5922,6 +5943,15 @@
       "resolved": "https://registry.npmjs.org/base-64/-/base-64-0.1.0.tgz",
       "integrity": "sha512-Y5gU45svrR5tI2Vt/X9GPd3L0HNIKzGu202EjxrXMpuc2V2CiKgemAbUUsqYmZJvPtCXoUKjNZwBJzsNScUbXA=="
     },
+    "node_modules/base64-arraybuffer": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-1.0.2.tgz",
+      "integrity": "sha512-I3yl4r9QB5ZRY3XuJVEPfc2XhZO6YweFPI+UovAzn+8/hb3oJ6lnysaFcjVpkCPfVWFUDvoZ8kmVDP7WyRtYtQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6.0"
+      }
+    },
     "node_modules/base64-js": {
       "version": "1.5.1",
       "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
@@ -6579,6 +6609,12 @@
         "simple-swizzle": "^0.2.2"
       }
     },
+    "node_modules/color2k": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/color2k/-/color2k-2.0.3.tgz",
+      "integrity": "sha512-zW190nQTIoXcGCaU08DvVNFTmQhUpnJfVuAKfWqUQkflXKpaDdpaYoM0iluLS9lgJNHyBF58KKA2FBEwkD7wog==",
+      "license": "MIT"
+    },
     "node_modules/colorbrewer": {
       "version": "1.5.6",
       "resolved": "https://registry.npmjs.org/colorbrewer/-/colorbrewer-1.5.6.tgz",
@@ -10870,6 +10906,12 @@
         "jiti": "bin/jiti.js"
       }
     },
+    "node_modules/js-base64": {
+      "version": "3.7.7",
+      "resolved": "https://registry.npmjs.org/js-base64/-/js-base64-3.7.7.tgz",
+      "integrity": "sha512-7rCnleh0z2CkXhH67J8K1Ytz0b2Y+yxTPL+/KOJoa20hfnVQ/3/T6W/KflYI4bRHRagNeXeU2bkNGI3v1oS/lw==",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/js-cookie": {
       "version": "3.0.5",
       "resolved": "https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.5.tgz",
@@ -15973,6 +16015,18 @@
         "requires-port": "^1.0.0"
       }
     },
+    "node_modules/use-debounce": {
+      "version": "10.0.4",
+      "resolved": "https://registry.npmjs.org/use-debounce/-/use-debounce-10.0.4.tgz",
+      "integrity": "sha512-6Cf7Yr7Wk7Kdv77nnJMf6de4HuDE4dTxKij+RqE9rufDsI6zsbjyAxcH5y2ueJCQAnfgKbzXbZHYlkFwmBlWkw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16.0.0"
+      },
+      "peerDependencies": {
+        "react": "*"
+      }
+    },
     "node_modules/use-long-press": {
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/use-long-press/-/use-long-press-3.2.0.tgz",
@@ -16370,6 +16424,12 @@
         "node": ">=18"
       }
     },
+    "node_modules/whatwg-fetch": {
+      "version": "3.6.20",
+      "resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-3.6.20.tgz",
+      "integrity": "sha512-EqhiFU6daOA8kpjOWTL0olhVOF3i7OrFzSYiGsEMB8GcXS+RrzauAERX65xMeNWVqxA6HXH2m69Z9LaKKdisfg==",
+      "license": "MIT"
+    },
     "node_modules/whatwg-mimetype": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
diff --git a/app/package.json b/app/package.json
index 8e73a88e..6f9aea23 100644
--- a/app/package.json
+++ b/app/package.json
@@ -8,7 +8,7 @@
     "install:globals": "npm install -g @ionic/cli",
     "dev": "npm run build:generate-open-source-page; VITE_APP_VERSION=$(git describe --tags --always) vite",
     "dev:android": "ionic capacitor copy android && ionic capacitor run android -l --external",
-    "dev:docker": "VITE_DOCKER=true vite --host",
+    "dev:docker": "VITE_DOCKER=true vite --host 0.0.0.0",
     "dev:ios": "ionic capacitor copy ios && ionic capacitor run ios -l --external",
     "build:development": "npm run build:generate-open-source-page; tsc && VITE_APP_VERSION=$(git describe --tags --always) vite build --mode development",
     "build:acceptance": "npm run build:generate-open-source-page; tsc && vite build --mode acceptance",
@@ -37,6 +37,7 @@
     "@capacitor/share": "^6.0.2",
     "@capacitor/splash-screen": "^6.0.2",
     "@capacitor/status-bar": "6.0.1",
+    "@heroiclabs/nakama-js": "^2.8.0",
     "@ionic/core": "^8.2.7",
     "@ionic/react": "^8.2.7",
     "@ionic/react-router": "^8.2.7",
@@ -45,6 +46,7 @@
     "@uidotdev/usehooks": "^2.4.1",
     "autoprefixer": "^10.4.20",
     "beautiful-react-hooks": "^5.0.2",
+    "color2k": "^2.0.3",
     "dayjs": "^1.11.13",
     "deck.gl": "^9.0.27",
     "i18next": "^23.14.0",
@@ -63,6 +65,7 @@
     "react-transition-group": "^4.4.5",
     "redaxios": "^0.5.1",
     "tailwindcss": "^3.4.10",
+    "use-debounce": "^10.0.0",
     "use-long-press": "^3.2.0"
   },
   "devDependencies": {
diff --git a/app/public/locales/en/translation.json b/app/public/locales/en/translation.json
index 86e9a490..891bfd71 100644
--- a/app/public/locales/en/translation.json
+++ b/app/public/locales/en/translation.json
@@ -20,6 +20,7 @@
   "contact": "Contact",
   "settings": "Settings",
   "cancel": "Cancel",
+  "rename": "Rename",
   "close": "Close",
   "bagAnalytics": "Bag Analytics",
   "history": "History",
@@ -155,5 +156,9 @@
   "updateHeaderDesc": "This change will be visible to all loop members.",
   "resetHeaders": "Reset headers",
   "resetHeadersDesc": "Reset your loop's headers to the default headers.",
-  "areYouSureYouWantToResetHeaders": "Are you sure you want to reset the loop's headers to defualt?"
+  "areYouSureYouWantToResetHeaders": "Are you sure you want to reset the loop's headers to defualt?",
+  "chatRoomOptions": "Chat Room Options",
+  "createRoom": "Create Room",
+  "roomName": "Room Name",
+  "roomColor": "Room Color"
 }
diff --git a/app/src/Routes.tsx b/app/src/Routes.tsx
index 0ed8594d..fdf0f6e8 100644
--- a/app/src/Routes.tsx
+++ b/app/src/Routes.tsx
@@ -23,6 +23,7 @@ import {
   homeOutline,
   cubeOutline,
   peopleCircleOutline,
+  chatbubblesOutline,
   pauseCircleOutline,
 } from "ionicons/icons";
 
@@ -68,7 +69,7 @@ import HelpItem from "./pages/HelpItem";
 import AddressList from "./pages/AddressList";
 import AddressItem from "./pages/AddressItem";
 import BagsList from "./pages/BagsList";
-import BulkyList from "./pages/BulkyList";
+import Chat from "./pages/Chat";
 import PrivacyPolicy from "./pages/PrivacyPolicy";
 import Login from "./pages/Login";
 import Settings from "./pages/Settings";
@@ -204,7 +205,7 @@ function AppRoute() {
         <Route exact path="/address" component={AddressList}></Route>
         <Route path="/address/:uid" component={AddressItem}></Route>
         <Route exact path="/bags" component={BagsList}></Route>
-        <Route exact path="/bulky-items" component={BulkyList}></Route>
+        <Route exact path="/chat" component={Chat}></Route>
         <Route exact path="/settings" component={Settings}></Route>
         <Route
           exact
@@ -239,14 +240,13 @@ function AppRoute() {
             <BagSVG bag={{ number: "", color: "currentColor" }} isList />
           </div>
           {hasBagTooOldMe ? (
-            <div className="tw-rounded-full tw-w-2.5 tw-h-2.5 tw-absolute tw-top-[3px] tw-left-[calc(50%+10px)] tw-ring-1 tw-bg-danger"></div>
+            <div className="tw-rounded-full tw-w-2.5 tw-h-2.5 tw-absolute tw-top-[3px] tw-left-[calc(50%+10px)] tw-ring-1 tw-ring-text tw-bg-danger"></div>
           ) : null}
           <IonLabel className="tw-text-[10px]">{t("bags")}</IonLabel>
         </IonTabButton>
-
-        <IonTabButton tab="bulky-items" href="/bulky-items" disabled={!chain}>
-          <IonIcon aria-hidden="true" icon={cubeOutline} />
-          <IonLabel>{t("bulkyItems")}</IonLabel>
+        <IonTabButton tab="chat" href="/chat" disabled={!chain}>
+          <IonIcon aria-hidden="true" icon={chatbubblesOutline} />
+          <IonLabel>{t("chat")}</IonLabel>
         </IonTabButton>
 
         <IonTabButton tab="settings" href="/settings">
diff --git a/app/src/api/chat.ts b/app/src/api/chat.ts
new file mode 100644
index 00000000..8786f05a
--- /dev/null
+++ b/app/src/api/chat.ts
@@ -0,0 +1,32 @@
+import axios from "./axios";
+
+export interface RespChatPatchUser {
+  chat_pass: string;
+  chat_user_id: string;
+}
+export function chatPatchUser() {
+  return axios.patch<RespChatPatchUser>(`/v2/chat/user/password`);
+}
+
+export function chatCreateGroup(
+  chain_uid: string,
+  group_id: string | undefined,
+) {
+  return axios.post<never>(`/v2/chat/group/create`, {
+    chain_uid,
+    group_id,
+  });
+}
+
+export function chatDeleteGroup(chain_uid: string, group_id: string) {
+  return axios.post<never>(`/v2/chat/group/delete`, {
+    chain_uid,
+    group_id,
+  });
+}
+
+// export function chatJoinGroups(chain_uid: string) {
+//   return axios.post<never>(`/v2/chat/group/join`, {
+//     chain_uid,
+//   });
+// }
diff --git a/app/src/api/types.ts b/app/src/api/types.ts
index 6a301b73..cf615fcb 100644
--- a/app/src/api/types.ts
+++ b/app/src/api/types.ts
@@ -69,6 +69,7 @@ export interface Chain {
   headers_override?: string;
   theme?: string;
   is_app_disabled?: boolean;
+  chat_room_ids?: string[];
 }
 
 export interface Event {
diff --git a/app/src/components/Bags/SelectUserModal.tsx b/app/src/components/Bags/SelectUserModal.tsx
index 1456de93..f70527f3 100644
--- a/app/src/components/Bags/SelectUserModal.tsx
+++ b/app/src/components/Bags/SelectUserModal.tsx
@@ -70,7 +70,7 @@ export default function SelectUserModal({
   }, [selectedUserUID, route, authUser, chainUsers]);
 
   async function submit(userUID: string) {
-    console.log("user:", userUID, " bag:", bagID);
+    console.info("Select a user for bag", "user:", userUID, "bag:", bagID);
 
     if ((typeof userUID !== "string" || !userUID) && !bagID) return;
     modal.current?.dismiss(userUID, "success");
diff --git a/app/src/components/Chat/BulkyList.tsx b/app/src/components/Chat/BulkyList.tsx
new file mode 100644
index 00000000..a85dbfb5
--- /dev/null
+++ b/app/src/components/Chat/BulkyList.tsx
@@ -0,0 +1,339 @@
+import {
+  IonButton,
+  IonButtons,
+  IonCard,
+  IonCardContent,
+  IonIcon,
+  IonItem,
+  IonLabel,
+  IonModal,
+  IonText,
+  useIonAlert,
+  useIonToast,
+} from "@ionic/react";
+import { Fragment, useContext, useRef, useState } from "react";
+import { useTranslation } from "react-i18next";
+import toastError from "../../../toastError";
+import { BulkyItem, User } from "../../api/types";
+import { bulkyItemPut, bulkyItemRemove } from "../../api/bulky";
+import { StoreContext } from "../../stores/Store";
+import CreateBulky from "../CreateUpdateBulky";
+import { OnSendMessageWithImage } from "../../pages/Chat";
+import { uploadImage, uploadImageFile } from "../../api/imgbb";
+
+export default function BulkyList() {
+  const { t } = useTranslation();
+  const {
+    chain,
+    chainUsers,
+    bulkyItems,
+    //   setChain,
+    authUser,
+    //   getChainHeader,
+    isChainAdmin,
+    isThemeDefault,
+    refresh,
+    shouldBlur,
+  } = useContext(StoreContext);
+  const modal = useRef<HTMLIonModalElement>(null);
+  const [presentAlert] = useIonAlert();
+  const [present] = useIonToast();
+  const [updateBulky, setUpdateBulky] = useState<BulkyItem | null>(null);
+  const [modalDesc, setModalDesc] = useState({ title: "", message: "" });
+  const refModalDesc = useRef<HTMLIonModalElement>(null);
+  // const headerSheetModal = useRef<HTMLIonModalElement>(null);
+
+  // const headerKey = "bulkyList";
+
+  // const headerText = getChainHeader(headerKey, t("bulkyItemsTitle"));
+
+  // function refreshChain() {
+  //   setChain(chain?.uid, authUser);
+  // }
+
+  function handleClickDelete(id: number) {
+    const handler = async () => {
+      await bulkyItemRemove(chain!.uid, authUser!.uid, id).catch((err) => {
+        toastError(present, err);
+      });
+      await refresh("bulky-items");
+    };
+    presentAlert({
+      header: t("deleteBulkyItem"),
+      message: t("areYouSureYouWantToDeleteThisBulkyItem"),
+      buttons: [
+        {
+          text: t("cancel"),
+          role: "cancel",
+        },
+        {
+          text: t("delete"),
+          role: "destructive",
+          handler,
+        },
+      ],
+    });
+  }
+
+  function handleClickReadMore(bulkyItem: BulkyItem) {
+    setModalDesc(bulkyItem);
+    refModalDesc.current?.present();
+  }
+
+  function handleClickEdit(b: BulkyItem) {
+    setUpdateBulky(b);
+
+    modal.current?.present();
+  }
+  function handleClickReserve(user: User, bulkyItemName: string) {
+    const handler = (type: "sms" | "whatsapp" | "telegram" | "signal") => {
+      let phone = user.phone_number.replaceAll(/[^\d]/g, "");
+      let message = window.encodeURI(
+        t("imInterestedInThisBulkyItem", { name: bulkyItemName }),
+      );
+      console.info("phone", phone, "message", message);
+
+      switch (type) {
+        case "sms":
+          window.open(`sms:${phone}?&body=${message}`, "_blank");
+          break;
+        case "whatsapp":
+          window.open(`https://wa.me/${phone}?text=${message}`, "_blank");
+          break;
+        case "telegram":
+          window.open(`https://t.me/+${phone}?text=${message}`, "_blank");
+          break;
+        case "signal":
+          window.open(`https://signal.me/+${phone}`, "_blank");
+          break;
+      }
+    };
+    let buttons = [
+      {
+        text: "SMS",
+        role: "submit",
+        cssClass: "!tw-font-bold",
+        handler: () => handler("sms"),
+      },
+      {
+        text: "Telegram",
+        role: "submit",
+        cssClass: "!tw-font-bold",
+        handler: () => handler("telegram"),
+      },
+      {
+        text: "Signal",
+        role: "submit",
+        cssClass: "!tw-font-bold",
+        handler: () => handler("signal"),
+      },
+      {
+        text: "WhatsApp",
+        role: "submit",
+        cssClass: "!tw-font-bold",
+        handler: () => handler("whatsapp"),
+      },
+      {
+        text: t("close"),
+        role: "cancel",
+        cssClass: "!tw-font-normal",
+      },
+    ];
+
+    presentAlert({
+      header: t("ifYouAreInterestedPleaseSendAMessage", {
+        name: user.name,
+      }),
+      buttons,
+    });
+  }
+  function onImgErrorHideAlt(e: any) {
+    e.target.style.display = "none";
+  }
+  async function onSendMessageWithImage(combinedMessage: string, file: string) {
+    if (!chain || !authUser) return;
+
+    const [title, message = ""] = combinedMessage.split("\n\n", 2);
+    const image_url = await uploadImage(file, 800).then(
+      (res) => res.data.image,
+    );
+
+    bulkyItemPut({
+      chain_uid: chain.uid,
+      user_uid: authUser.uid,
+      title,
+      message,
+      image_url,
+    });
+  }
+
+  return (
+    <div
+      className={`tw-relative tw-flex tw-flex-col tw-flex-grow ${
+        isThemeDefault ? " tw-bg-blue-contrast" : ""
+      }`}
+    >
+      {bulkyItems.map((bulkyItem, i) => {
+        const user = chainUsers.find((u) => u.uid === bulkyItem.user_uid);
+        if (!user) return null;
+        const isMe = authUser?.uid === user.uid;
+        let createdAt = new Date(bulkyItem.created_at);
+        let shouldExpandText =
+          bulkyItem.message.length > 50 ||
+          bulkyItem.message.split("\n").length > 4;
+
+        return (
+          <IonCard
+            key={bulkyItem.id}
+            className={"tw-bg-light tw-z-10 tw-rounded-none".concat(
+              shouldBlur ? " tw-blur" : "",
+            )}
+            color={"background"}
+          >
+            {bulkyItem.image_url ? (
+              <div
+                className={`tw-relative tw-min-h-[124px] ${
+                  i % 2 === 0 ? "tw-bg-primary-shade" : "tw-bg-secondary-shade"
+                }`}
+              >
+                <img
+                  alt={bulkyItem.title}
+                  src={bulkyItem.image_url}
+                  className="tw-block"
+                  onError={onImgErrorHideAlt}
+                />
+              </div>
+            ) : null}
+            <IonCardContent className="tw-pb-[5px]">
+              <div className="tw-flex tw-flex-row tw-justify-between tw-mb-6">
+                <IonText color="dark" className="tw-text-3xl ">
+                  {bulkyItem.title}
+                </IonText>
+                <IonText
+                  color="dark"
+                  className="tw-text-md tw-self-end tw-pb-1"
+                >
+                  {createdAt.toLocaleDateString()}
+                </IonText>
+              </div>
+              <IonText className="tw-text-dark tw-py-[3px]"></IonText>
+              <IonItem
+                lines="none"
+                routerLink={"/address/" + user.uid}
+                className="tw-my-0 -tw-mx-4"
+                color="background"
+              >
+                <IonText>
+                  <div className="tw-mb-4">
+                    <h3 className="ion-no-margin !tw-font-bold tw-text-lg tw-leading-5">
+                      {t("address")}
+                    </h3>
+                    <p className="ion-text-wrap tw-opacity-60">
+                      {user.address}
+                    </p>
+                  </div>
+                </IonText>
+              </IonItem>
+              <IonItem
+                className="tw-my-0 -tw-mx-4"
+                color="background"
+                lines="none"
+              >
+                <IonLabel
+                  onClick={
+                    shouldExpandText
+                      ? () => handleClickReadMore(bulkyItem)
+                      : undefined
+                  }
+                >
+                  <div
+                    className={
+                      shouldExpandText ? "tw-max-h-16 tw-overflow-hidden" : ""
+                    }
+                  >
+                    <h3 className="ion-no-margin !tw-font-bold tw-text-lg tw-leading-5">
+                      {t("description")}
+                    </h3>
+                    <p className={`ion-text-wrap tw-opacity-60`}>
+                      {bulkyItem.message}
+                    </p>
+                  </div>
+                  {shouldExpandText ? (
+                    <span className="tw-mt-[-3px] tw-text-sm tw-leading-5 tw-font-semibold tw-block tw-text-primary tw-cursor-pointer">
+                      {t("readMore")}
+                    </span>
+                  ) : null}
+                </IonLabel>
+              </IonItem>
+            </IonCardContent>
+
+            <IonButtons className="tw-flex tw-justify-around ion-margin-bottom ion-margin-horizontal ">
+              {isMe || isChainAdmin ? (
+                <>
+                  <IonButton
+                    fill="clear"
+                    className="tw-font-bold tw-w-1/3"
+                    onClick={() => handleClickEdit(bulkyItem)}
+                    color="secondary"
+                  >
+                    {t("edit")}
+                  </IonButton>
+                  <IonButton
+                    fill="clear"
+                    color="danger"
+                    className="tw-font-bold tw-w-1/3"
+                    onClick={() => handleClickDelete(bulkyItem.id)}
+                  >
+                    {t("delete")}
+                  </IonButton>
+                </>
+              ) : null}
+              <IonButton
+                slot="end"
+                fill="clear"
+                color="warning"
+                className="tw-font-bold tw-w-1/3"
+                onClick={() => handleClickReserve(user, bulkyItem.title)}
+              >
+                {t("contact")}
+              </IonButton>
+            </IonButtons>
+          </IonCard>
+        );
+      })}
+
+      <IonModal
+        ref={refModalDesc}
+        initialBreakpoint={0.6}
+        breakpoints={[0, 0.6, 1]}
+      >
+        <div className="ion-padding tw-text-lg tw-leading-6">
+          <h1 className="tw-mt-0">{modalDesc.title}</h1>
+          {modalDesc.message.split("\n").map((s, i) => (
+            <Fragment key={i}>
+              {s}
+              <br />
+            </Fragment>
+          ))}
+        </div>
+      </IonModal>
+
+      <div className="tw-absolute tw-overflow-hidden tw-inset-0">
+        {/* Background SVGs */}
+        <IonIcon
+          aria-hidden="true"
+          icon="/v2_o.svg"
+          style={{ fontSize: 500 }}
+          color={isThemeDefault ? "" : "light"}
+          className="tw-absolute tw-right-[180px] -tw-top-[20px] tw-text-blue-tint dark:tw-text-blue-shade"
+        />
+      </div>
+      <CreateBulky
+        modal={modal}
+        didDismiss={() => refresh("bulky-items")}
+        bulky={updateBulky}
+        onSendBulkyItem={onSendMessageWithImage}
+      />
+    </div>
+  );
+}
diff --git a/app/src/components/Chat/ChatInput.tsx b/app/src/components/Chat/ChatInput.tsx
new file mode 100644
index 00000000..a08482f6
--- /dev/null
+++ b/app/src/components/Chat/ChatInput.tsx
@@ -0,0 +1,190 @@
+import {
+  IonButton,
+  IonFab,
+  IonFabButton,
+  IonFabList,
+  IonIcon,
+  IonInput,
+  IonItem,
+  IonLabel,
+  IonPopover,
+} from "@ionic/react";
+import { cubeOutline, pulseOutline, sendOutline } from "ionicons/icons";
+import { MouseEvent, useContext, useRef, useState } from "react";
+import { Sleep } from "../../utils/sleep";
+import { addOutline } from "ionicons/icons";
+import CreateBulky from "../CreateUpdateBulky";
+import { BulkyItem } from "../../api/types";
+import { StoreContext } from "../../stores/Store";
+import BagSVG from "../../components/Bags/Svg";
+import { useTranslation } from "react-i18next";
+import { IonButtonCustomEvent, IonFabButtonCustomEvent } from "@ionic/core";
+
+export enum SendingMsgState {
+  DEFAULT,
+  SENDING,
+  ERROR,
+}
+interface Props {
+  isOldBulkyItems: boolean;
+  onSendMessage: (msg: string) => Promise<void>;
+  onSendMessageWithImage: (
+    title: string,
+    msg: string,
+    image: string,
+  ) => Promise<void>;
+}
+
+// This follows the controller / view component pattern
+export default function ChatInput(props: Props) {
+  const { t } = useTranslation();
+  const [message, setMessage] = useState("");
+  const [status, setStatus] = useState(SendingMsgState.DEFAULT);
+  const modal = useRef<HTMLIonModalElement>(null);
+  const [updateBulky, setUpdateBulky] = useState<BulkyItem | null>(null);
+  const { refresh } = useContext(StoreContext);
+  const refChatInput = useRef<HTMLIonInputElement>(null);
+
+  async function sendMessage() {
+    setStatus(SendingMsgState.SENDING);
+    try {
+      await props.onSendMessage(message);
+      setMessage("");
+      setStatus(SendingMsgState.DEFAULT);
+    } catch (e: any) {
+      console.error("Error creating post", e);
+      setStatus(SendingMsgState.ERROR);
+      await Sleep(1000);
+      setStatus(SendingMsgState.DEFAULT);
+    }
+  }
+
+  function onSubmit(e: any) {
+    e.preventDefault();
+    sendMessage();
+    setTimeout(() => {
+      const el = refChatInput.current?.querySelector("input") as any;
+
+      console.log("focus back", el);
+      el?.focus();
+    }, 100);
+  }
+
+  function handleClickPlus(e: MouseEvent) {
+    setUpdateBulky(null);
+    modal.current?.present();
+  }
+  function handleClickFabText(
+    e: MouseEvent,
+    callback: (e: MouseEvent) => void,
+  ) {
+    const fab = (e.target as HTMLButtonElement).closest("ion-fab");
+    fab?.toggle();
+    callback(e);
+  }
+  return (
+    <>
+      <div className="tw-bg-light">
+        {props.isOldBulkyItems ? (
+          <form className="tw-flex-shrink-0" onSubmit={onSubmit}>
+            <IonItem
+              lines="none"
+              color="light"
+              button
+              onClick={handleClickPlus}
+              detail={false}
+              detailIcon={addOutline}
+              style={{
+                "--detail-icon-color": "var(--ion-color-primary)",
+                "--detail-icon-opacity": "1",
+              }}
+            >
+              <IonIcon
+                slot="start"
+                className="tw-opacity-25"
+                icon={cubeOutline}
+              />
+              <IonLabel>{t("createBulkyItem")}</IonLabel>
+              <IonIcon slot="end" color="primary" icon={addOutline} />
+            </IonItem>
+          </form>
+        ) : (
+          // <>
+          // <IonFab
+          //   slot="fixed"
+          //   vertical="bottom"
+          //   horizontal="start"
+          //   color="light"
+          //   className="-tw-ml-3 -tw-mb-4"
+          // >
+          //   <IonFabButton size="small" id="main-fab">
+          //     <IonIcon icon={addOutline}></IonIcon>
+          //   </IonFabButton>
+          //   <IonFabList side="top" className="tw-mb-14">
+          //     <div className="tw-relative">
+          //       <IonFabButton
+          //         onClick={handleClickPlus}
+          //         size="small"
+          //         id="fab-bulky"
+          //       >
+          //         <IonIcon icon={cubeOutline} color="primary"></IonIcon>
+          //       </IonFabButton>
+          //       <div className="tw-absolute tw-top-0 tw-bottom-0 tw-left-full tw-w-[max-content] tw-flex tw-items-center">
+          //         <button
+          //           onClick={(e) => handleClickFabText(e, handleClickPlus)}
+          //           className="tw-py-1 tw-px-4 tw-bg-light tw-rounded tw-opacity-80 hover:tw-opacity-100 tw-font-bold tw-text-sm"
+          //         >
+          //           {t("createBulkyItem")}
+          //         </button>
+          //       </div>
+          //     </div>
+          //   </IonFabList>
+          // </IonFab>
+          <form className="tw-flex-shrink-0" onSubmit={onSubmit}>
+            <IonItem
+              lines="none"
+              color="light"
+              disabled={status == SendingMsgState.SENDING}
+            >
+              <IonInput
+                ref={refChatInput}
+                placeholder="Send Message"
+                value={message}
+                disabled={status == SendingMsgState.SENDING}
+                onIonInput={(e) => setMessage(e.detail.value as string)}
+                className="tw-bg-background tw-my-1 tw-min-h-10 [&_*]:tw-ps-3"
+              />
+              <IonFabButton
+                slot="end"
+                disabled={status !== SendingMsgState.DEFAULT}
+                // color="light"
+                size="small"
+                className="tw-ms-0 tw-my-0 -tw-me-2"
+                style={{
+                  "--box-shadow": "none",
+                  "--background": "var(--ion-color-light)",
+                  "--background-hover": "var(--ion-color-primary-tint)",
+                  "--color": "var(--ion-color-primary)",
+                  "--color-hover": "var(--ion-color-base-light)",
+                  "--color-focused": "var(--ion-color-base-light)",
+                  "--color-activated": "var(--ion-color-base-light)",
+                }}
+                type="button"
+                onClick={onSubmit}
+              >
+                <IonIcon icon={sendOutline} className="tw-text-2xl" />
+              </IonFabButton>
+            </IonItem>
+          </form>
+          // </>
+        )}
+      </div>
+      <CreateBulky
+        modal={modal}
+        didDismiss={() => refresh("bulky-items")}
+        bulky={updateBulky}
+        onSendBulkyItem={props.onSendMessageWithImage}
+      />
+    </>
+  );
+}
diff --git a/app/src/components/Chat/ChatPost.tsx b/app/src/components/Chat/ChatPost.tsx
new file mode 100644
index 00000000..d3264257
--- /dev/null
+++ b/app/src/components/Chat/ChatPost.tsx
@@ -0,0 +1,238 @@
+import { User } from "../../api/types";
+import { useMemo, useRef, useState } from "react";
+import { useLongPress } from "use-long-press";
+import { IonButton, IonIcon } from "@ionic/react";
+import { ellipsisVertical } from "ionicons/icons";
+import { ChannelMessage, User as UserProfile } from "@heroiclabs/nakama-js";
+import { PostActionSheetOpen } from "./ChatPostList";
+
+export interface ChatPostProps {
+  post: ChannelMessage;
+  users: User[];
+  authUser: User | null | undefined;
+  getMmUser: (id: string) => Promise<UserProfile>;
+  // getFile: (fileId: string, timestamp: number) => void;
+  isChainAdmin: boolean;
+  onLongPress: (o: PostActionSheetOpen) => void;
+}
+
+export default function ChatPost(props: ChatPostProps) {
+  const longPress = useLongPress((e) => {
+    props.onLongPress({ post: props.post, isMe });
+  });
+  const [username, setUsername] = useState("");
+  const [isMe, setIsMe] = useState(false);
+  const refModalDesc = useRef<HTMLIonModalElement>(null);
+  //const [user, setUser] = useState(User)
+  const message = useMemo(() => {
+    if (props.post?.code !== 0) return "";
+    props.getMmUser(props.post.sender_id!).then((res) => {
+      const user = props.users.find((u) => res.username === u.uid);
+      setUsername(user ? user.name : res.username || "Unknown");
+      setIsMe(user?.uid === props.authUser?.uid);
+    });
+    let message = (props.post.content as any).message || "";
+    for (let user of props.users) {
+      if (user) message = message.replaceAll(user.uid, user.name);
+    }
+    return message;
+  }, [props.users, props.post]);
+
+  // useEffect(() => {
+  //   fetchPostImage()
+  //     .then((im) => {
+  //       if (im) setImageURL(im);
+  //     })
+  //     .catch((err) => {
+  //       console.error(err);
+  //     });
+  // }, [props.users, props.post]);
+
+  // async function fetchPostImage() {
+  //   if (!props.post.file_ids) return;
+  //   const fileid = props.post.file_ids[0];
+  //   const timestamp = props.post.create_at;
+  //   try {
+  //     const _image = await props.getFile(fileid, timestamp);
+  //     return _image as unknown as string;
+  //   } catch (err) {
+  //     console.error("Error retrieving image from post", err);
+  //     throw err;
+  //   }
+  // }
+
+  function handleClickReadMore() {
+    refModalDesc.current?.present();
+  }
+
+  let shouldExpandText = message.length > 150 || message.split("\n").length > 4;
+  if (!message) {
+    return null;
+  }
+
+  if (props.post.code !== 0) {
+    return (
+      <div className="tw-flex tw-justify-center">
+        <div
+          className="tw-rounded tw-max-w-xs tw-text-center tw-text-sm tw-p-1 tw-my-2 tw-opacity-70 focus:tw-opacity-100 tw-bg-light"
+          tabIndex={-1}
+        >
+          {message}
+        </div>
+      </div>
+    );
+  }
+
+  // if (imageURL) {
+  //   const bulkyTitle =
+  //     message.indexOf("\n") != -1
+  //       ? message.substring(0, message.indexOf("\n")).trim()
+  //       : "";
+  //   const bulkyMessage =
+  //     message.indexOf("\n") != -1
+  //       ? message.substring(message.indexOf("\n")).trim()
+  //       : "";
+
+  //   return (
+  //     <>
+  //       <div
+  //         className="tw-mb-2 tw-flex tw-flex-row"
+  //         {...(props.isChainAdmin ? longPress : {})}
+  //       >
+  //         <div
+  //           className={"tw-rounded-tl-xl tw-rounded-tr-xl tw-rounded-br-xl tw-inline-block tw-mx-4 tw-relative".concat(
+  //             isMe ? " tw-bg-purple-shade" : " tw-bg-light",
+  //           )}
+  //         >
+  //           <div className="tw-my-1 tw-rounded-tl-xl tw-rounded-tr-xl tw-rounded-br-xl tw-text-xs tw-font-bold tw-px-2 tw-text-white">
+  //             {username}
+  //           </div>
+  //           <img
+  //             className="-tw-px-2 tw-inline-block tw-max-h-60"
+  //             src={imageURL}
+  //             alt={bulkyTitle}
+  //           ></img>
+  //           {username ? (
+  //             <div className="tw-text-xs tw-font-bold tw-px-2 tw-absolute tw-top-56 tw-text-white">
+  //               {bulkyTitle}
+  //             </div>
+  //           ) : null}
+  //           <IonItem
+  //             lines="none"
+  //             routerLink={"/address/" + props.authUser?.uid}
+  //             className="tw-my-0 tw-ps-2"
+  //             color="background"
+  //             style={{ "--padding-start": "0" }}
+  //           >
+  //             <div className="tw-py-2">
+  //               <h3 className="ion-no-margin !tw-font-bold tw-text-xs tw-leading-5">
+  //                 {t("address")}
+  //               </h3>
+  //               <p className="ion-text-wrap tw-opacity-60 tw-text-xs">
+  //                 {props.authUser?.address}
+  //               </p>
+  //             </div>
+  //           </IonItem>
+  //           {bulkyMessage == "" ? null : (
+  //             <IonItem
+  //               color="background"
+  //               lines="none"
+  //               className={`tw-my-0 -tw-mx-4 tw-px-2 ${
+  //                 shouldExpandText ? "-tw-mb-3" : "tw-mb-2"
+  //               } `}
+  //             >
+  //               <h3 className="ion-no-margin !tw-font-bold tw-text-xs tw-leading-5">
+  //                 {t("description")}
+  //               </h3>
+  //               <p
+  //                 className={`ion-text-wrap tw-opacity-60 tw-text-xs tw-overflow-hidden ${
+  //                   shouldExpandText ? "tw-max-h-[48px]" : ""
+  //                 }`}
+  //               >
+  //                 {bulkyMessage}
+  //               </p>
+  //             </IonItem>
+  //           )}
+  //           {shouldExpandText ? (
+  //             <IonText
+  //               onClick={
+  //                 shouldExpandText ? () => handleClickReadMore() : undefined
+  //               }
+  //               className="tw-pt-2 tw-ml-2 2 tw-h-9 tw-align-middle tw-text-xs tw-leading-5 tw-font-semibold tw-block tw-text-primary"
+  //             >
+  //               {t("readMore")}
+  //             </IonText>
+  //           ) : null}
+  //         </div>
+  //         {props.isChainAdmin ? (
+  //           <IonButton
+  //             onClick={() => props.onLongPress(props.post.message_id!)}
+  //             color="transparent"
+  //             className="tw-sticky tw-top-0 tw-opacity-70"
+  //             size="small"
+  //             type="button"
+  //           >
+  //             <IonIcon
+  //               slot="icon-only"
+  //               size="small"
+  //               color="dark"
+  //               icon={ellipsisVertical}
+  //             />
+  //           </IonButton>
+  //         ) : null}
+  //       </div>
+  //       <IonModal
+  //         ref={refModalDesc}
+  //         initialBreakpoint={0.6}
+  //         breakpoints={[0, 0.6, 1]}
+  //       >
+  //         <div className="ion-padding tw-text-lg tw-leading-6">
+  //           <h1 className="tw-mt-0">{bulkyTitle}</h1>
+  //           {bulkyMessage}
+  //         </div>
+  //       </IonModal>
+  //     </>
+  //   );
+  // }
+
+  return (
+    <div
+      className={"tw-mb-2 tw-flex tw-justify-start".concat(
+        isMe ? " tw-flex-row-reverse" : " tw-flex-row",
+      )}
+      {...(props.isChainAdmin ? longPress : {})}
+    >
+      <div
+        className={"tw-max-w-full tw-overflow-hidden tw-rounded-tl-xl tw-rounded-tr-xl tw-inline-block tw-p-2 tw-mx-4".concat(
+          isMe
+            ? " tw-bg-purple-shade tw-rounded-bl-xl"
+            : " tw-bg-light tw-rounded-br-xl",
+        )}
+      >
+        {username ? (
+          <div className="tw-text-xs tw-font-bold">{username}</div>
+        ) : null}
+        <div className="tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-break-spaces tw-break-normal">
+          {message}
+        </div>
+      </div>
+      {props.isChainAdmin || isMe ? (
+        <IonButton
+          onClick={() => props.onLongPress({ post: props.post, isMe })}
+          color="transparent"
+          className="tw-sticky tw-top-0 tw-opacity-70"
+          size="small"
+          type="button"
+          shape="round"
+        >
+          <IonIcon
+            slot="icon-only"
+            size="small"
+            color="dark"
+            icon={ellipsisVertical}
+          />
+        </IonButton>
+      ) : null}
+    </div>
+  );
+}
diff --git a/app/src/components/Chat/ChatPostList.tsx b/app/src/components/Chat/ChatPostList.tsx
new file mode 100644
index 00000000..c1871d4b
--- /dev/null
+++ b/app/src/components/Chat/ChatPostList.tsx
@@ -0,0 +1,111 @@
+import ChatPost from "./ChatPost";
+import { User } from "../../api/types";
+import { useContext, useMemo, useState } from "react";
+import {
+  ActionSheetButton,
+  IonActionSheet,
+  IonIcon,
+  useIonAlert,
+} from "@ionic/react";
+import { useTranslation } from "react-i18next";
+import {
+  ChannelMessage,
+  ChannelMessageList,
+  User as UserProfile,
+} from "@heroiclabs/nakama-js";
+import { StoreContext } from "../../stores/Store";
+import { chatbubblesOutline } from "ionicons/icons";
+
+interface Props {
+  postList: ChannelMessageList;
+  isChainAdmin: boolean;
+  authUser: User | null | undefined;
+  getMmUser: (id: string) => Promise<UserProfile>;
+  // getFile: (fileId: string, timestamp: number) => void;
+  chainUsers: User[];
+  onDeletePost: (id: string) => void;
+}
+
+export interface PostActionSheetOpen {
+  post: ChannelMessage;
+  isMe: boolean;
+}
+
+export default function ChatPostList(props: Props) {
+  const { t } = useTranslation();
+  const [isPostActionSheetOpen, setIsPostActionSheetOpen] =
+    useState<PostActionSheetOpen | null>(null);
+  const [presentAlert] = useIonAlert();
+  const { isChainAdmin, authUser } = useContext(StoreContext);
+
+  const postActionButtons = useMemo(() => {
+    const list: ActionSheetButton<any>[] = [
+      {
+        text: t("delete"),
+        role: "destructive",
+        handler: () => handlePostOptionSelect("delete"),
+      },
+      {
+        text: t("cancel"),
+        role: "cancel",
+      },
+    ];
+    return list;
+  }, [isChainAdmin, isPostActionSheetOpen]);
+
+  function handlePostOptionSelect(value: "delete") {
+    if (value == "delete") {
+      if (!isPostActionSheetOpen) return;
+      const postID = isPostActionSheetOpen.post.message_id!;
+      presentAlert({
+        header: "Delete post?",
+        buttons: [
+          {
+            text: t("cancel"),
+          },
+          {
+            role: "destructive",
+            text: t("delete"),
+            handler: () => props.onDeletePost(postID),
+          },
+        ],
+      });
+    }
+  }
+
+  return (
+    <>
+      {props.postList.messages?.map((post, i) => {
+        // const prevPostID = props.postList.order[i + 1];
+        // const prevPost = prevPostID ? props.postList.posts[prevPostID] : null;
+        return (
+          <ChatPost
+            isChainAdmin={props.isChainAdmin}
+            authUser={props.authUser}
+            onLongPress={(o) => setIsPostActionSheetOpen(o)}
+            post={post}
+            getMmUser={props.getMmUser}
+            // getFile={props.getFile}
+            key={post.message_id}
+            users={props.chainUsers}
+          />
+        );
+      })}
+
+      {props.postList.messages?.length !== 0 ? null : (
+        <div className="tw-w-full tw-h-screen tw-flex tw-justify-center tw-items-center">
+          <div className="tw-text-center tw-relative">
+            <IonIcon icon={chatbubblesOutline} className="tw-text-6xl" />
+            <h1>Start Chatting</h1>
+          </div>
+        </div>
+      )}
+
+      <IonActionSheet
+        isOpen={isPostActionSheetOpen !== null}
+        onDidDismiss={() => setIsPostActionSheetOpen(null)}
+        buttons={postActionButtons}
+      ></IonActionSheet>
+    </>
+  );
+}
diff --git a/app/src/components/Chat/ChatRoomSelect.tsx b/app/src/components/Chat/ChatRoomSelect.tsx
new file mode 100644
index 00000000..ad64efc7
--- /dev/null
+++ b/app/src/components/Chat/ChatRoomSelect.tsx
@@ -0,0 +1,301 @@
+import {
+  IonActionSheet,
+  IonButton,
+  IonButtons,
+  IonContent,
+  IonHeader,
+  IonIcon,
+  IonInput,
+  IonItem,
+  IonLabel,
+  IonList,
+  IonModal,
+  IonTitle,
+  IonToolbar,
+  useIonAlert,
+} from "@ionic/react";
+import { useRef, useState } from "react";
+import { useLongPress } from "use-long-press";
+import {
+  addOutline,
+  build as buildFilled,
+  checkmarkCircle,
+  ellipse,
+} from "ionicons/icons";
+import { useTranslation } from "react-i18next";
+import { UserGroup } from "@heroiclabs/nakama-js";
+import { readableColor } from "color2k";
+
+interface Props {
+  chainChannels: UserGroup[];
+  selectedChannel: UserGroup | null;
+  isChainAdmin: boolean;
+  onSelectChannel: (cr: UserGroup) => void;
+  onCreateChannel: (name: string, color: string) => void;
+  onDeleteChannelSubmit: () => void;
+  onRenameChannelSubmit: (name: string) => void;
+  selectedOldBulkyItems: boolean;
+  onSelectOldBulkyItems: () => void;
+}
+
+export default function ChatRoomSelect(props: Props) {
+  const { t } = useTranslation();
+  const [isChannelActionSheetOpen, setIsChannelActionSheetOpen] =
+    useState(false);
+  const [presentAlert] = useIonAlert();
+  const longPressChannel = useLongPress(
+    (e) => {
+      setIsChannelActionSheetOpen(true);
+    },
+    {
+      onCancel: (e) => {
+        setIsChannelActionSheetOpen(false);
+      },
+    },
+  );
+  const modal = useRef<HTMLIonModalElement>(null);
+  const [channelName, setChannelName] = useState("");
+
+  const channelColors = [
+    "#C9843E",
+    "#AD8F22",
+    "#79A02D",
+    "#66926E",
+    "#199FBA",
+    "#6494C2",
+    "#1467B3",
+    "#A899C2",
+    "#513484",
+    "#B37EAD",
+    "#B76DAC",
+    "#F57BB0",
+    "#A35C7B",
+    "#E38C95",
+    "#C73643",
+    "#7D7D7D",
+    "#3C3C3B",
+  ];
+  const [channelColor, setChannelColor] = useState(channelColors[2]);
+
+  function onCreateChannelSubmit() {
+    props.onCreateChannel(channelName, channelColor);
+    modal.current?.dismiss();
+  }
+  function cancel() {
+    modal.current?.dismiss();
+  }
+  function handleChannelOptionSelect(value: "delete" | "rename") {
+    if (value == "delete") {
+      const handler = () => {
+        props.onDeleteChannelSubmit();
+      };
+      presentAlert({
+        header: "Delete chat room?",
+        buttons: [
+          {
+            text: t("cancel"),
+          },
+          {
+            role: "destructive",
+            text: t("delete"),
+            handler,
+          },
+        ],
+      });
+    } else if (value == "rename") {
+      const handler = (e: { newChannelName: string }) => {
+        props.onRenameChannelSubmit(e.newChannelName);
+      };
+      presentAlert({
+        header: "Rename chat room?",
+        buttons: [
+          {
+            text: t("cancel"),
+          },
+          {
+            role: "submit",
+            text: t("submit"),
+            handler,
+          },
+        ],
+        inputs: [
+          {
+            placeholder: props.selectedChannel?.group!.description!,
+            name: "newChannelName",
+          },
+        ],
+      });
+    }
+  }
+
+  return (
+    <div className="tw-shrink-0 w-full tw-flex tw-px-2 tw-gap-1 tw-overflow-x-auto tw-bg-purple-shade">
+      <button
+        className={"tw-p-2 tw-flex tw-flex-col tw-items-center tw-group".concat(
+          props.selectedOldBulkyItems ? " tw-bg-[#fff]/20" : "",
+        )}
+        key="oldBulkyItems"
+        onClick={props.onSelectOldBulkyItems}
+      >
+        <div
+          className={"tw-relative tw-font-bold tw-w-12 tw-h-12 tw-rounded-full tw-bg-blue-tint tw-flex tw-items-center tw-justify-center tw-ring group-hover:tw-ring-blue tw-transition-colors".concat(
+            props.selectedOldBulkyItems
+              ? " tw-ring-blue tw-ring-1"
+              : " tw-ring-transparent",
+          )}
+        >
+          <span>B</span>
+        </div>
+        <div
+          className={"tw-text-xs tw-text-center tw-truncate tw-max-w-[3.5rem]".concat(
+            props.selectedOldBulkyItems ? " tw-font-bold" : "",
+          )}
+        >
+          {t("bulkyItems")}
+        </div>
+      </button>
+      {props.chainChannels.map((cr, i) => {
+        const initials = cr
+          .group!.description!.split(" ")
+          .map((word) => word[0])
+          .join("");
+
+        const isSelected = cr.group!.id === props.selectedChannel?.group!.id;
+
+        const textColor = readableColor(cr.group!.avatar_url || "#fff");
+        return (
+          <button
+            className={"tw-p-2 tw-flex tw-flex-col tw-items-center tw-group".concat(
+              isSelected ? " tw-bg-[#fff]/20" : "",
+            )}
+            key={cr.group!.id}
+            {...(isSelected
+              ? props.isChainAdmin
+                ? longPressChannel(isSelected)
+                : {}
+              : {
+                  onClick: () => props.onSelectChannel(cr),
+                })}
+          >
+            <div
+              style={{ backgroundColor: cr.group!.avatar_url || "#fff" }}
+              className={"tw-relative tw-font-bold tw-w-12 tw-h-12 tw-rounded-full tw-flex tw-items-center tw-justify-center tw-ring  group-hover:tw-ring-purple tw-transition-colors".concat(
+                isSelected
+                  ? " tw-ring-purple tw-ring-1"
+                  : " tw-ring-transparent",
+              )}
+            >
+              <span style={{ color: textColor }}>{initials}</span>
+              {isSelected && props.isChainAdmin ? (
+                <div className="tw-absolute tw-bottom-0 tw-right-0 tw-bg-light-shade tw-z-10 tw-w-6 tw-h-6 tw-rounded-full -tw-m-1 tw-flex tw-justify-center tw-items-center">
+                  <IonIcon icon={buildFilled} size="xs" color="dark" />
+                </div>
+              ) : null}
+            </div>
+            <div
+              className={"tw-text-xs tw-text-center tw-truncate tw-max-w-[3.5rem]".concat(
+                isSelected ? " tw-font-bold" : "",
+              )}
+            >
+              {cr.group!.description!}
+            </div>
+          </button>
+        );
+      })}
+      <IonActionSheet
+        header={t("chatRoomOptions")}
+        key="actionSheet"
+        isOpen={isChannelActionSheetOpen}
+        onDidDismiss={() => setIsChannelActionSheetOpen(false)}
+        buttons={[
+          {
+            text: t("rename"),
+            handler: () => handleChannelOptionSelect("rename"),
+          },
+          {
+            text: t("delete"),
+            role: "destructive",
+            handler: () => handleChannelOptionSelect("delete"),
+          },
+          {
+            text: t("cancel"),
+            role: "cancel",
+          },
+        ]}
+      ></IonActionSheet>
+
+      {props.isChainAdmin ? (
+        <div key="plus" className="tw-p-2 tw-me-4 tw-flex tw-shrink-0">
+          <button
+            id="create_channel_btn"
+            className="tw-font-bold tw-w-12 tw-h-12 tw-rounded-full tw-bg-light-shade hover:tw-bg-purple-contrast tw-flex tw-items-center tw-justify-center"
+          >
+            <IonIcon className="tw-text-2xl" src={addOutline} />
+          </button>
+        </div>
+      ) : null}
+      <IonModal ref={modal} trigger="create_channel_btn">
+        <IonHeader>
+          <IonToolbar>
+            <IonButtons slot="start">
+              <IonButton onClick={cancel}>{t("cancel")}</IonButton>
+            </IonButtons>
+            <IonTitle>{t("createRoom")}</IonTitle>
+            <IonButtons slot="end">
+              <IonButton onClick={onCreateChannelSubmit}>
+                {t("Create")}
+              </IonButton>
+            </IonButtons>
+          </IonToolbar>
+        </IonHeader>
+        <IonContent fullscreen>
+          <IonList>
+            <IonItem lines="none">
+              <IonInput
+                type="text"
+                label={t("roomName")}
+                labelPlacement="start"
+                max={18}
+                spellCheck
+                autoCapitalize="words"
+                maxlength={18}
+                counter
+                placeholder={t("roomName")}
+                onFocus={(e) => (e.target as any as HTMLInputElement).select()}
+                onIonInput={(e) =>
+                  setChannelName(e.detail.value?.toString() || "")
+                }
+              />
+            </IonItem>
+            <IonItem lines="none">
+              <IonLabel>
+                {t("roomColor")}
+                <div className="tw-grid tw-grid-cols-[repeat(auto-fill,75px)] tw-justify-center">
+                  {channelColors.map((c) => {
+                    const selected = c === channelColor;
+                    return (
+                      <IonButton
+                        fill="clear"
+                        size="default"
+                        key={c}
+                        onClick={() => setChannelColor(c)}
+                        className="hover:!tw-opacity-100 tw-group"
+                      >
+                        <IonIcon
+                          icon={selected ? checkmarkCircle : ellipse}
+                          style={{ color: c }}
+                          size="large"
+                          className="tw-border-2 tw-border-solid tw-border-transparent tw-rounded-full group-hover:tw-border-medium group-active:tw-border-primary"
+                        />
+                      </IonButton>
+                    );
+                  })}
+                </div>
+              </IonLabel>
+            </IonItem>
+          </IonList>
+        </IonContent>
+      </IonModal>
+    </div>
+  );
+}
diff --git a/app/src/components/Chat/RoomNotReady.tsx b/app/src/components/Chat/RoomNotReady.tsx
new file mode 100644
index 00000000..29db4dbe
--- /dev/null
+++ b/app/src/components/Chat/RoomNotReady.tsx
@@ -0,0 +1,30 @@
+import { IonButton } from "@ionic/react";
+
+interface Props {
+  isChainAdmin: boolean;
+  onClickEnable: () => void;
+}
+
+// This follows the controller / view component pattern
+export default function RoomNotReady(props: Props) {
+  return (
+    <div className="tw-flex tw-flex-col tw-h-full tw-justify-center tw-items-center">
+      <h1>Room is not enabled</h1>
+      {props.isChainAdmin ? (
+        <>
+          <p>Allow members to chat with each other</p>
+          <IonButton
+            type="button"
+            color="light"
+            className="tw-mt-4"
+            onClick={props.onClickEnable}
+          >
+            Enable
+          </IonButton>
+        </>
+      ) : (
+        <p>Ask your Loop host to enable chat</p>
+      )}
+    </div>
+  );
+}
diff --git a/app/src/components/CreateUpdateBulky.tsx b/app/src/components/CreateUpdateBulky.tsx
index 82bdc8c5..70e3a554 100644
--- a/app/src/components/CreateUpdateBulky.tsx
+++ b/app/src/components/CreateUpdateBulky.tsx
@@ -24,15 +24,13 @@ import {
   hourglassOutline,
   imageOutline,
 } from "ionicons/icons";
-import { ChangeEvent, RefObject, useContext, useState } from "react";
-import { bulkyItemPut } from "../api/bulky";
+import { ChangeEvent, RefObject, useRef, useState } from "react";
 import { BulkyItem } from "../api/types";
-import { StoreContext } from "../stores/Store";
 import { OverlayEventDetail } from "@ionic/react/dist/types/components/react-component-lib/interfaces";
 import toastError from "../../toastError";
 import { useTranslation } from "react-i18next";
 import { Camera, CameraResultType } from "@capacitor/camera";
-import { uploadImage } from "../api/imgbb";
+import { OnSendMessageWithImage } from "../pages/Chat";
 
 enum State {
   idle,
@@ -41,31 +39,33 @@ enum State {
   loading,
 }
 
-export default function CreateUpdateBulky({
+export default function CreateBulky({
   bulky,
   didDismiss,
   modal,
+  onSendBulkyItem,
 }: {
   bulky: BulkyItem | null;
   modal: RefObject<HTMLIonModalElement>;
   didDismiss?: (
     e: IonModalCustomEvent<OverlayEventDetail<BulkyItem | null>>,
   ) => void;
+  onSendBulkyItem: OnSendMessageWithImage;
 }) {
   const { t } = useTranslation();
-  const { chain, authUser } = useContext(StoreContext);
   const [bulkyTitle, setBulkyTitle] = useState("");
   const [bulkyMessage, setBulkyMessage] = useState("");
-  const [bulkyImageURL, setBulkyImageURL] = useState("");
+  const [imageData, setImageData] = useState<string>();
   const [error, setError] = useState("");
   const [isCapacitor] = useState(() => isPlatform("capacitor"));
   const [loadingUpload, setLoadingUpload] = useState(State.loading);
   const [present] = useIonToast();
+  const refScrollRoot = useRef<HTMLDivElement>(null);
 
-  function modalInit() {
+  function modalPresent() {
     setBulkyTitle(bulky?.title || "");
     setBulkyMessage(bulky?.message || "");
-    setBulkyImageURL(bulky?.image_url || "");
+    setImageData(bulky?.image_url);
     setLoadingUpload(State.idle);
   }
 
@@ -73,7 +73,6 @@ export default function CreateUpdateBulky({
     modal.current?.dismiss();
     setBulkyTitle("");
     setBulkyMessage("");
-    setBulkyImageURL("");
     setLoadingUpload(State.idle);
   }
   async function createOrUpdate() {
@@ -85,23 +84,19 @@ export default function CreateUpdateBulky({
       setError("message");
       return;
     }
-    if (!bulkyImageURL) {
+    if (!imageData) {
       setError("image-url");
       return;
     }
+
     try {
-      let body: Parameters<typeof bulkyItemPut>[0] = {
-        chain_uid: chain!.uid,
-        user_uid: bulky?.user_uid || authUser!.uid,
-        title: bulkyTitle,
-        message: bulkyMessage,
-        image_url: bulkyImageURL,
-      };
-      if (bulky) body.id = bulky.id;
-      await bulkyItemPut(body);
+      await onSendBulkyItem(bulkyTitle, bulkyMessage, imageData);
 
-      setError("");
+      refScrollRoot.current?.scrollTo({
+        top: 0,
+      });
 
+      setError("");
       modal.current?.dismiss("", "confirm");
     } catch (err: any) {
       setError(err.status);
@@ -134,9 +129,9 @@ export default function CreateUpdateBulky({
   function handleWebUpload(e: ChangeEvent<HTMLInputElement>) {
     const file = e.target.files?.[0];
     if (!file) return;
-
     setLoadingUpload(State.loading);
 
+    // https://pqina.nl/blog/convert-a-file-to-a-base64-string-with-javascript/#encoding-the-file-as-a-base-string
     function getBase64(file: File) {
       return new Promise<string>((resolve, reject) => {
         let reader = new FileReader();
@@ -150,11 +145,8 @@ export default function CreateUpdateBulky({
     }
 
     (async () => {
-      // https://pqina.nl/blog/convert-a-file-to-a-base64-string-with-javascript/#encoding-the-file-as-a-base-string
       const image64 = await getBase64(file);
-
-      const res = await uploadImage(image64, 800);
-      setBulkyImageURL(res.data.image);
+      setImageData(image64);
     })()
       .then(() => {
         setLoadingUpload(State.success);
@@ -171,16 +163,14 @@ export default function CreateUpdateBulky({
     const photo = await Camera.getPhoto({
       resultType: CameraResultType.Base64,
     });
-    if (!photo.base64String) throw "Image not found";
-
-    const res = await uploadImage(photo.base64String, 800);
-    setBulkyImageURL(res.data.image);
+    if (!photo.dataUrl) throw "Image not found";
+    setImageData(photo.dataUrl);
   }
 
   return (
     <IonModal
       ref={modal}
-      onIonModalWillPresent={modalInit}
+      onIonModalWillPresent={modalPresent}
       onIonModalDidDismiss={didDismiss}
     >
       <IonHeader>
@@ -240,7 +230,7 @@ export default function CreateUpdateBulky({
               <IonLabel className="tw-mt-2 tw-mb-0">{t("image")}</IonLabel>
 
               <div className="tw-text-center tw-w-full">
-                {!(loadingUpload === State.loading) && bulkyImageURL ? (
+                {!(loadingUpload === State.loading) && imageData ? (
                   <IonCard
                     onClick={handleClickUpload}
                     className={`tw-my-8 tw-mx-[50px] tw-border tw-border-solid ${
@@ -248,7 +238,7 @@ export default function CreateUpdateBulky({
                     }`}
                   >
                     <IonImg
-                      src={bulkyImageURL}
+                      src={imageData}
                       alt={t("loading")}
                       className="tw-max-w-full"
                     />
diff --git a/app/src/main.tsx b/app/src/main.tsx
index e2377439..869eb8e9 100644
--- a/app/src/main.tsx
+++ b/app/src/main.tsx
@@ -1,4 +1,4 @@
-import { StrictMode } from "react";
+// import { StrictMode } from "react";
 import { createRoot } from "react-dom/client";
 import App from "./App";
 import "./i18n";
@@ -10,7 +10,8 @@ axois.defaults.withCredentials = IS_WEB;
 const container = document.getElementById("root");
 const root = createRoot(container!);
 root.render(
-  <StrictMode>
-    <App />
-  </StrictMode>,
+  // StrictMode runs a refresh making debugging difficult
+  // <StrictMode>
+  <App />,
+  // </StrictMode>,
 );
diff --git a/app/src/pages/BulkyList.tsx b/app/src/pages/BulkyList.tsx
deleted file mode 100644
index 9eb6588c..00000000
--- a/app/src/pages/BulkyList.tsx
+++ /dev/null
@@ -1,368 +0,0 @@
-import {
-  IonButton,
-  IonButtons,
-  IonCard,
-  IonCardContent,
-  IonContent,
-  IonHeader,
-  IonIcon,
-  IonItem,
-  IonModal,
-  IonPage,
-  IonText,
-  IonTitle,
-  IonToolbar,
-  useIonAlert,
-  useIonToast,
-} from "@ionic/react";
-import { Fragment, useContext, useRef, useState } from "react";
-import { useTranslation } from "react-i18next";
-import toastError from "../../toastError";
-import { BulkyItem, User } from "../api/types";
-import { bulkyItemRemove } from "../api/bulky";
-import CreateUpdateBulky from "../components/CreateUpdateBulky";
-import { StoreContext } from "../stores/Store";
-import OverlayPaused from "../components/OverlayPaused";
-import OverlayAppDisabled from "../components/OverlayChainAppDisabled";
-import EditHeaders from "../components/EditHeaders";
-import HeaderTitle from "../components/HeaderTitle";
-
-export default function BulkyList() {
-  const { t } = useTranslation();
-  const {
-    chain,
-    chainUsers,
-    bulkyItems,
-    setChain,
-    authUser,
-    getChainHeader,
-    isChainAdmin,
-    isThemeDefault,
-    refresh,
-    shouldBlur,
-  } = useContext(StoreContext);
-  const modal = useRef<HTMLIonModalElement>(null);
-  const [presentAlert] = useIonAlert();
-  const [present] = useIonToast();
-  const [updateBulky, setUpdateBulky] = useState<BulkyItem | null>(null);
-  const [modalDesc, setModalDesc] = useState({ title: "", message: "" });
-  const refModalDesc = useRef<HTMLIonModalElement>(null);
-  const headerSheetModal = useRef<HTMLIonModalElement>(null);
-
-  const headerKey = "bulkyList";
-
-  const headerText = getChainHeader(headerKey, t("bulkyItemsTitle"));
-
-  function refreshChain() {
-    setChain(chain?.uid, authUser);
-  }
-
-  function handleClickDelete(id: number) {
-    const handler = async () => {
-      await bulkyItemRemove(chain!.uid, authUser!.uid, id).catch((err) => {
-        toastError(present, err);
-      });
-      await setChain(chain?.uid, authUser);
-    };
-    presentAlert({
-      header: t("deleteBulkyItem"),
-      message: t("areYouSureYouWantToDeleteThisBulkyItem"),
-      buttons: [
-        {
-          text: t("cancel"),
-          role: "cancel",
-        },
-        {
-          text: t("delete"),
-          role: "destructive",
-          handler,
-        },
-      ],
-    });
-  }
-
-  function handleClickReadMore(bulkyItem: BulkyItem) {
-    setModalDesc(bulkyItem);
-    refModalDesc.current?.present();
-  }
-
-  function handleClickCreate() {
-    setUpdateBulky(null);
-
-    modal.current?.present();
-  }
-  function handleClickEdit(b: BulkyItem) {
-    setUpdateBulky(b);
-
-    modal.current?.present();
-  }
-  function handleClickReserve(user: User, bulkyItemName: string) {
-    const handler = (type: "sms" | "whatsapp" | "telegram" | "signal") => {
-      let phone = user.phone_number.replaceAll(/[^\d]/g, "");
-      let message = window.encodeURI(
-        t("imInterestedInThisBulkyItem", { name: bulkyItemName }),
-      );
-      console.log("phone", phone, "message", message);
-
-      switch (type) {
-        case "sms":
-          window.open(`sms:${phone}?&body=${message}`, "_blank");
-          break;
-        case "whatsapp":
-          window.open(`https://wa.me/${phone}?text=${message}`, "_blank");
-          break;
-        case "telegram":
-          window.open(`https://t.me/+${phone}?text=${message}`, "_blank");
-          break;
-        case "signal":
-          window.open(`https://signal.me/+${phone}`, "_blank");
-          break;
-      }
-    };
-    let buttons = [
-      {
-        text: "SMS",
-        role: "submit",
-        cssClass: "!tw-font-bold",
-        handler: () => handler("sms"),
-      },
-      {
-        text: "Telegram",
-        role: "submit",
-        cssClass: "!tw-font-bold",
-        handler: () => handler("telegram"),
-      },
-      {
-        text: "Signal",
-        role: "submit",
-        cssClass: "!tw-font-bold",
-        handler: () => handler("signal"),
-      },
-      {
-        text: "WhatsApp",
-        role: "submit",
-        cssClass: "!tw-font-bold",
-        handler: () => handler("whatsapp"),
-      },
-      {
-        text: t("close"),
-        role: "cancel",
-        cssClass: "!tw-font-normal",
-      },
-    ];
-
-    presentAlert({
-      header: t("ifYouAreInterestedPleaseSendAMessage", {
-        name: user.name,
-      }),
-      buttons,
-    });
-  }
-  function onImgErrorHideAlt(e: any) {
-    e.target.style.display = "none";
-  }
-
-  return (
-    <IonPage>
-      <OverlayPaused />
-      <OverlayAppDisabled />
-      <IonHeader translucent>
-        <IonToolbar>
-          <IonTitle>{headerText}</IonTitle>
-          <IonButtons
-            slot="end"
-            className={`${isThemeDefault ? "tw-text-blue" : "primary"}`}
-          >
-            <IonButton
-              onClick={handleClickCreate}
-              color={isThemeDefault ? "tw-text-blue" : "primary"}
-            >
-              {t("create")}
-            </IonButton>
-          </IonButtons>
-        </IonToolbar>
-      </IonHeader>
-      <IonContent
-        fullscreen
-        class={isThemeDefault ? "tw-bg-blue-contrast" : ""}
-      >
-        <IonHeader collapse="condense">
-          <IonToolbar className="tw-bg-transparent">
-            <HeaderTitle
-              headerText={headerText}
-              onEdit={() => headerSheetModal.current?.present()}
-              isChainAdmin={isChainAdmin}
-              className={"tw-font-serif tw-font-bold".concat(
-                isThemeDefault ? " tw-text-blue" : "",
-              )}
-            />
-          </IonToolbar>
-        </IonHeader>
-        {bulkyItems.map((bulkyItem, i) => {
-          const user = chainUsers.find((u) => u.uid === bulkyItem.user_uid);
-          if (!user) return null;
-          const isMe = authUser?.uid === user.uid;
-          let createdAt = new Date(bulkyItem.created_at);
-          let shouldExpandText =
-            bulkyItem.message.length > 50 ||
-            bulkyItem.message.split("\n").length > 4;
-
-          return (
-            <IonCard
-              key={bulkyItem.id}
-              className={"tw-bg-light tw-rounded-none".concat(
-                shouldBlur ? " tw-blur" : "",
-              )}
-              color={"background"}
-            >
-              {bulkyItem.image_url ? (
-                <div
-                  className={`tw-relative tw-min-h-[124px] ${
-                    i % 2 === 0
-                      ? "tw-bg-primary-shade"
-                      : "tw-bg-secondary-shade"
-                  }`}
-                >
-                  <img
-                    alt={bulkyItem.title}
-                    src={bulkyItem.image_url}
-                    className="tw-block"
-                    onError={onImgErrorHideAlt}
-                  />
-                </div>
-              ) : null}
-              <IonCardContent className="tw-pb-[5px]">
-                <div className="tw-flex tw-flex-row tw-justify-between tw-mb-6">
-                  <IonText color="dark" className="tw-text-3xl ">
-                    {bulkyItem.title}
-                  </IonText>
-                  <IonText
-                    color="dark"
-                    className="tw-text-md tw-self-end tw-pb-1"
-                  >
-                    {createdAt.toLocaleDateString()}
-                  </IonText>
-                </div>
-                <IonText
-                  onClick={
-                    shouldExpandText
-                      ? () => handleClickReadMore(bulkyItem)
-                      : undefined
-                  }
-                  className="tw-text-dark tw-py-[3px]"
-                ></IonText>
-                <IonItem
-                  lines="none"
-                  routerLink={"/address/" + user.uid}
-                  className="tw-my-0 -tw-mx-4"
-                  color="background"
-                >
-                  <IonText>
-                    <div className="tw-mb-4">
-                      <h3 className="ion-no-margin !tw-font-bold tw-text-lg tw-leading-5">
-                        {t("address")}
-                      </h3>
-                      <p className="ion-text-wrap tw-opacity-60">
-                        {user.address}
-                      </p>
-                    </div>
-                    {shouldExpandText ? (
-                      <span className="tw-mt-[-3px] tw-text-sm tw-leading-5 tw-font-semibold tw-block tw-text-primary">
-                        {t("readMore")}
-                      </span>
-                    ) : null}
-                    <div className="tw-mb-4">
-                      <h3 className="ion-no-margin !tw-font-bold tw-text-lg tw-leading-5">
-                        {t("description")}
-                      </h3>
-                      <p
-                        className={`ion-text-wrap tw-opacity-60  ${
-                          shouldExpandText ? "tw-max-h-[46px]" : ""
-                        }`}
-                      >
-                        {bulkyItem.message}
-                      </p>
-                    </div>
-                  </IonText>
-                </IonItem>
-              </IonCardContent>
-
-              <IonButtons className="tw-flex tw-justify-around ion-margin-bottom ion-margin-horizontal ">
-                {isMe || isChainAdmin ? (
-                  <>
-                    <IonButton
-                      fill="clear"
-                      className="tw-font-bold tw-w-1/3"
-                      onClick={() => handleClickEdit(bulkyItem)}
-                      color="secondary"
-                    >
-                      {t("edit")}
-                    </IonButton>
-                    <IonButton
-                      fill="clear"
-                      color="danger"
-                      className="tw-font-bold tw-w-1/3"
-                      onClick={() => handleClickDelete(bulkyItem.id)}
-                    >
-                      {t("delete")}
-                    </IonButton>
-                  </>
-                ) : null}
-                <IonButton
-                  slot="end"
-                  fill="clear"
-                  color="warning"
-                  className="tw-font-bold tw-w-1/3"
-                  onClick={() => handleClickReserve(user, bulkyItem.title)}
-                >
-                  {t("contact")}
-                </IonButton>
-              </IonButtons>
-            </IonCard>
-          );
-        })}
-
-        <IonModal
-          ref={refModalDesc}
-          initialBreakpoint={0.6}
-          breakpoints={[0, 0.6, 1]}
-        >
-          <div className="ion-padding tw-text-lg tw-leading-6">
-            <h1 className="tw-mt-0">{modalDesc.title}</h1>
-            {modalDesc.message.split("\n").map((s, i) => (
-              <Fragment key={i}>
-                {s}
-                <br />
-              </Fragment>
-            ))}
-          </div>
-        </IonModal>
-
-        {isChainAdmin ? (
-          <EditHeaders
-            modal={headerSheetModal}
-            didDismiss={refreshChain}
-            headerKey={headerKey}
-            initialHeader={headerText}
-          />
-        ) : null}
-        <div className="relative">
-          {/* Background SVGs */}
-          <IonIcon
-            aria-hidden="true"
-            icon="/v2_o.svg"
-            style={{ fontSize: 500 }}
-            color={isThemeDefault ? "" : "light"}
-            className="tw-absolute tw-right-[180px] -tw-top-[20px] -tw-z-10 tw-text-blue-tint dark:tw-text-blue-shade"
-          />
-        </div>
-      </IonContent>
-
-      <CreateUpdateBulky
-        modal={modal}
-        didDismiss={() => refresh("bulky-items")}
-        bulky={updateBulky}
-      />
-    </IonPage>
-  );
-}
diff --git a/app/src/pages/Chat.tsx b/app/src/pages/Chat.tsx
new file mode 100644
index 00000000..7360ee9d
--- /dev/null
+++ b/app/src/pages/Chat.tsx
@@ -0,0 +1,518 @@
+import {
+  IonContent,
+  IonHeader,
+  IonPage,
+  IonTitle,
+  IonToolbar,
+} from "@ionic/react";
+import { StoreContext } from "../stores/Store";
+import { useContext, useEffect, useMemo, useRef, useState } from "react";
+import * as apiChat from "../api/chat";
+import RoomNotReady from "../components/Chat/RoomNotReady";
+import Loading from "../components/PrivateRoute/Loading";
+import ChatRoomSelect from "../components/Chat/ChatRoomSelect";
+import { useIntersectionObserver } from "@uidotdev/usehooks";
+import ChatInput from "../components/Chat/ChatInput";
+import ChatPostList from "../components/Chat/ChatPostList";
+import BulkyList from "../components/Chat/BulkyList";
+
+import {
+  Client,
+  Channel,
+  ChannelMessageList,
+  User,
+  Session,
+  Socket,
+  UserGroup,
+} from "@heroiclabs/nakama-js";
+
+import { uploadImage } from "../api/imgbb";
+import { bulkyItemPut } from "../api/bulky";
+import { useLocation } from "react-router";
+
+const VITE_CHAT_HOST = import.meta.env.VITE_CHAT_HOST;
+const VITE_CHAT_PORT = import.meta.env.VITE_CHAT_PORT;
+const VITE_CHAT_SERVER_KEY = import.meta.env.VITE_CHAT_SERVER_KEY;
+const VITE_CHAT_SSL = import.meta.env.VITE_CHAT_SSL !== "false";
+
+const nakamaClient = new Client(
+  VITE_CHAT_SERVER_KEY,
+  VITE_CHAT_HOST,
+  VITE_CHAT_PORT,
+  VITE_CHAT_SSL,
+);
+
+const IS_GROUP_OPEN = true;
+
+export type OnSendMessageWithImage = (
+  title: string,
+  message: string,
+  file: string,
+) => Promise<void>;
+
+// This follows the controller / view component pattern
+export default function Chat() {
+  const location = useLocation();
+  const { chain, setChain, isThemeDefault } = useContext(StoreContext);
+
+  const [groups, setGroups] = useState<UserGroup[]>([]);
+  const [selectedGroup, setSelectedGroup] = useState<UserGroup | null>(null);
+  const [selectedOldBulkyItems, setSelectedOldBulkyItems] = useState(false);
+  const [postList, setPostList] = useState<ChannelMessageList>({
+    messages: [],
+  });
+  const [mmUsers, setMmUsers] = useState<Record<string, User>>({});
+  const [loadingPostList, setLoadingPostList] = useState(false);
+  const { authUser, chainUsers, isChainAdmin } = useContext(StoreContext);
+  const refScrollRoot = useRef<HTMLDivElement>(null);
+  const [refScrollTop] = useIntersectionObserver({
+    root: refScrollRoot.current,
+  });
+  const scrollTop = () => refScrollRoot.current?.scrollTo({ top: 0 });
+  const nakama = useNakama();
+
+  useEffect(() => {
+    if (chain && authUser) {
+      if (!nakama.state.session) {
+        nakama
+          .createSession(authUser.uid, authUser.email)
+          .then(async () => {
+            console.info("session user id ", nakama.state.session?.user_id);
+            try {
+              let chatRoomIds = chain.chat_room_ids || [];
+              if (!chain.chat_room_ids?.length && isChainAdmin) {
+                console.info("create first group");
+                const groupName = crypto.randomUUID();
+                const group = await nakamaClient.createGroup(
+                  nakama.state.session!,
+                  {
+                    avatar_url: "" /* Add here the chat color*/,
+                    description: "General",
+                    name: groupName,
+                    open: true,
+                  },
+                );
+                await apiChat.chatCreateGroup(chain.uid, group.id);
+                console.info("create group", group.id!);
+                // update chain object from server to update chain.room_ids value
+                await setChain(chain.uid, authUser);
+                chatRoomIds.push(group.id!);
+              }
+              await getGroups(chatRoomIds, true);
+            } catch (err) {
+              console.error("error nakamaClient", err);
+              if (nakama.state.session) {
+                console.error("nakama.state.session logout due to error");
+                nakamaClient.sessionLogout(
+                  nakama.state.session,
+                  nakama.state.session.token,
+                  nakama.state.session.refresh_token,
+                );
+              }
+            }
+          })
+          .catch((err) => {
+            console.error("error nakamaClient", err);
+          });
+      } else {
+        getGroups(chain.chat_room_ids || [], true);
+      }
+    }
+  }, [location]);
+
+  const chainChannels = useMemo(() => {
+    console.log("chainChannels", groups);
+    return groups.sort((a, b) =>
+      Date.parse(a.group!.create_time!) > Date.parse(b.group!.create_time!)
+        ? 1
+        : 0,
+    );
+  }, [groups, chain]);
+
+  /** Sets the channels state and return it too */
+  async function getGroups(
+    chatRoomIDs: string[],
+    isFirstTime: boolean = false,
+  ): Promise<UserGroup[]> {
+    if (!nakamaClient) throw "nClient is not available";
+    if (!nakama.state.session) throw "nSession is not available";
+
+    let _groups = await nakamaClient
+      .listUserGroups(nakama.state.session, nakama.state.session.user_id!)
+      .then<UserGroup[]>((res) => {
+        if (!res.user_groups) return [];
+        return res.user_groups;
+      });
+
+    // if first time find groups that are not available in nakama and join them
+    if (isFirstTime) {
+      let foundUnJoinedGroups = false;
+      const groupIds = _groups.map((ug) => ug.group!.id!);
+      // find loop groups that are not joined yet by the nakama user
+      for (const chatRoomID of chatRoomIDs) {
+        const found = groupIds.includes(chatRoomID);
+        if (!found) {
+          const ok = await nakamaClient
+            .joinGroup(nakama.state.session, chatRoomID)
+            .catch((e) => console.error("unable to find group", chatRoomID, e));
+          if (ok) {
+            foundUnJoinedGroups = true;
+          }
+        }
+      }
+      if (foundUnJoinedGroups) {
+        _groups = await nakamaClient
+          .listUserGroups(nakama.state.session, nakama.state.session.user_id!)
+          .then<UserGroup[]>((res) => {
+            console.log("listUserGroups", res);
+            if (!res.user_groups) return [];
+            return res.user_groups;
+          });
+      }
+    }
+
+    _groups = _groups.filter((ug) => chatRoomIDs.includes(ug.group!.id!));
+
+    _groups.sort((a, b) =>
+      Date.parse(a.group!.create_time!) > Date.parse(b.group!.create_time!)
+        ? 1
+        : 0,
+    );
+
+    setGroups(_groups);
+
+    if (isFirstTime) {
+      // if no channels are selected select the oldest
+      let _selectedGroup: UserGroup | null = _groups[0] || null;
+      console.log("selectedGroup", _selectedGroup, "_groups", _groups);
+      if (_selectedGroup) {
+        console.info("select first group", _selectedGroup);
+        onSelectGroup(_selectedGroup);
+      }
+      if (!_selectedGroup) onSelectOldBulkyItems();
+    }
+
+    return _groups;
+  }
+
+  async function onCreateChannel(name: string, color: string) {
+    if (!chain || !nakama.state.session) {
+      if (!chain) console.error("chain not found");
+      if (!nakamaClient) console.error("nClient not found");
+      if (!nakama.state.session) console.error("nSession not found");
+      return;
+    }
+    try {
+      console.info("Creating channel", name);
+      const group = await nakamaClient.createGroup(nakama.state.session, {
+        name: crypto.randomUUID(),
+        description: name,
+        avatar_url: color,
+        open: IS_GROUP_OPEN,
+      });
+      await apiChat.chatCreateGroup(chain.uid, group.id!);
+      const _groups = await getGroups([
+        ...(chain.chat_room_ids || []),
+        group.id!,
+      ]);
+      const _group = _groups.find((c) => c.group!.id == group.id!) || null;
+
+      // update chain object from server to update chain.room_ids value
+      await setChain(chain.uid, authUser);
+      if (!_group) {
+        onSelectOldBulkyItems();
+      } else {
+        await onSelectGroup(_group);
+      }
+      if (!_group) return;
+    } catch (err) {
+      console.error(err);
+    }
+  }
+
+  async function onRenameChannel(channel: UserGroup, name: string) {
+    if (!chain || !nakamaClient || !nakama.state.session) {
+      if (!chain) console.error("chain not found");
+      if (!nakamaClient) console.error("nakamaClient not found");
+      if (!nakama.state.session)
+        console.error("nakama.state.session not found");
+      return;
+    }
+    try {
+      console.info("Updating channel name", name);
+      await nakamaClient.updateGroup(nakama.state.session, channel.group!.id!, {
+        description: name,
+      });
+      await getGroups(chain?.chat_room_ids || []);
+    } catch (err) {
+      console.error(err);
+    }
+  }
+
+  async function onDeleteChannel(channelID: string) {
+    console.log(selectedGroup);
+    if (!chain || !nakamaClient) {
+      if (!chain) console.error("chain not found");
+      if (!nakamaClient) console.error("nakamaClient not found");
+      if (!nakama.state.session)
+        console.error("nakama.state.session not found");
+      return;
+    }
+    try {
+      console.info("Deleting channel", channelID);
+      await apiChat.chatDeleteGroup(chain.uid, channelID);
+
+      const _groups = groups.filter((c) => c.group!.id != channelID);
+      const _selectedGroup = _groups.at(-1) || null;
+
+      setGroups(_groups);
+      if (_selectedGroup) onSelectGroup(_selectedGroup);
+      else onSelectOldBulkyItems();
+      // update chain object from server to update chain.room_ids value
+      await setChain(chain.uid, authUser);
+      if (!_selectedGroup) return;
+      reqPostList("current");
+    } catch (err) {
+      console.error(err);
+    }
+  }
+
+  function onDeletePost(postID: string) {
+    if (!nakamaClient || !nakama.state.socket || !selectedGroup) return;
+
+    console.info("deleting post", postID);
+    nakama.state.socket
+      ?.removeChatMessage(nakama.state.channel!.id!, postID)
+      .finally(() => {
+        reqPostList("current");
+      });
+  }
+
+  async function onSelectGroup(group: UserGroup) {
+    if (nakama.state.socket && nakama.state.channel)
+      await nakama.state.socket.leaveChat(nakama.state.channel.id!);
+
+    console.info("selected group", group.group!.id);
+    if (!group || !nakamaClient || !nakama.state.session) return;
+    if (!nakama.state.socket) {
+      nakama.createSocket();
+      await nakama.state.socket!.connect(nakama.state.session, true);
+    }
+    nakama.state.channel = await nakama.state.socket!.joinChat(
+      group.group!.id!,
+      3,
+      true,
+      false,
+    );
+
+    nakama.state.socket!.onchannelmessage = (msg) => {
+      console.log("channel message", msg);
+      if (msg.channel_id == nakama.state.channel?.id) reqPostList("current");
+    };
+
+    setSelectedOldBulkyItems(false);
+    setSelectedGroup(group);
+    setTimeout(() => {
+      console.log("request current group chat");
+      reqPostList("current");
+    }, 0);
+  }
+
+  async function reqPostList(cursor: "previous" | "current") {
+    if (loadingPostList) return;
+    // Don't ask for more posts than the last post
+    if (cursor == "previous" && !postList.next_cursor) return;
+    setLoadingPostList(true);
+    if (!nakamaClient || !nakama.state.session) return;
+
+    const newPosts = await nakamaClient.listChannelMessages(
+      nakama.state.session,
+      nakama.state.channel!.id,
+      100,
+      false,
+      cursor == "previous" ? postList.next_cursor : undefined,
+    );
+
+    if (cursor == "previous") {
+      setPostList((s) => ({
+        cacheable_cursor: newPosts.cacheable_cursor,
+        messages: [...s.messages!, ...newPosts.messages!],
+        next_cursor: newPosts.next_cursor,
+        prev_cursor: s.prev_cursor,
+      }));
+    } else {
+      setPostList(newPosts);
+    }
+    setLoadingPostList(false);
+  }
+
+  function onSendMessageWithImage(
+    title: string,
+    message: string,
+    image: string,
+  ): Promise<void> {
+    return (async () => {
+      if (!selectedOldBulkyItems) {
+        console.log("Images not supported yet in chat");
+        return;
+      }
+
+      if (selectedOldBulkyItems) {
+        if (!authUser || !chain) return;
+        const res = await uploadImage(image, 800);
+        res.data.image;
+        bulkyItemPut({
+          chain_uid: chain.uid,
+          user_uid: authUser.uid,
+          title,
+          message,
+        });
+      } else {
+        await reqPostList("current");
+      }
+    })().then(() => {
+      scrollTop();
+    });
+  }
+
+  async function onSendMessage(message: string) {
+    if (
+      !selectedGroup ||
+      !nakama.state.socket ||
+      !nakamaClient ||
+      !nakama.state.channel
+    )
+      return;
+    await nakama.state.socket.writeChatMessage(nakama.state.channel!.id!, {
+      message,
+    });
+
+    await reqPostList("current");
+    scrollTop();
+  }
+
+  function onClickEnableChat() {
+    apiChat.chatPatchUser();
+  }
+
+  async function getMmUser(mmUserID: string): Promise<User> {
+    const found = mmUsers[mmUserID];
+    if (found) return found;
+    if (!nakama.state.session) throw "No session";
+
+    const res = await nakamaClient?.getUsers(nakama.state.session, [mmUserID]);
+    if (!res?.users?.length) throw "Unable to find user";
+    const firstUser = res.users[0];
+    setMmUsers((s) => ({
+      [firstUser.id!]: firstUser,
+      ...s,
+    }));
+    return firstUser;
+  }
+
+  function onSelectOldBulkyItems() {
+    setSelectedGroup(null);
+    setSelectedOldBulkyItems(true);
+    if (nakama.state.channel && nakama.state.socket)
+      nakama.state.socket.leaveChat(nakama.state.channel.id!);
+  }
+  function onDeleteChannelSubmit() {
+    if (!selectedGroup) return;
+    if (selectedGroup) onDeleteChannel(selectedGroup.group!.id!);
+  }
+  function onRenameChannelSubmit(name: string) {
+    if (!selectedGroup) return;
+    onRenameChannel(selectedGroup, name);
+  }
+
+  if (!authUser) {
+    return <Loading />;
+  }
+
+  return (
+    <IonPage>
+      <IonHeader translucent>
+        <IonToolbar>
+          <IonTitle className={isThemeDefault ? "tw-text-purple" : ""}>
+            Chat
+          </IonTitle>
+        </IonToolbar>
+      </IonHeader>
+      <IonContent
+        fullscreen
+        class={isThemeDefault ? "tw-bg-purple-contrast" : ""}
+      >
+        <div className="tw-relative tw-h-full tw-flex tw-flex-col">
+          <ChatRoomSelect
+            chainChannels={chainChannels}
+            selectedChannel={selectedGroup}
+            isChainAdmin={isChainAdmin}
+            onSelectChannel={onSelectGroup}
+            onCreateChannel={onCreateChannel}
+            onDeleteChannelSubmit={onDeleteChannelSubmit}
+            onRenameChannelSubmit={onRenameChannelSubmit}
+            selectedOldBulkyItems={selectedOldBulkyItems}
+            onSelectOldBulkyItems={onSelectOldBulkyItems}
+          />
+          <div
+            ref={refScrollRoot}
+            className={"tw-flex-grow tw-flex tw-overflow-y-auto".concat(
+              selectedOldBulkyItems ? "" : " tw-flex-col-reverse",
+            )}
+          >
+            {selectedOldBulkyItems ? (
+              <BulkyList />
+            ) : nakama.state.session ? (
+              <ChatPostList
+                isChainAdmin={isChainAdmin}
+                authUser={authUser}
+                getMmUser={getMmUser}
+                // getFile={getFile}
+                postList={postList}
+                chainUsers={chainUsers}
+                onDeletePost={onDeletePost}
+              />
+            ) : (
+              <RoomNotReady
+                isChainAdmin={isChainAdmin}
+                onClickEnable={onClickEnableChat}
+              />
+            )}
+            <span key="top" ref={refScrollTop}></span>
+          </div>
+          <ChatInput
+            isOldBulkyItems={selectedOldBulkyItems}
+            onSendMessage={onSendMessage}
+            onSendMessageWithImage={onSendMessageWithImage}
+          />
+        </div>
+      </IonContent>
+    </IonPage>
+  );
+}
+
+function useNakama() {
+  const [state] = useState<{
+    channel?: Channel;
+    session?: Session;
+    socket?: Socket;
+  }>({});
+
+  const createSession = (uid: string, email: string) =>
+    apiChat.chatPatchUser().then(async (resp) => {
+      const password = resp.data.chat_pass;
+      state.session = await nakamaClient.authenticateEmail(
+        email,
+        password,
+        true,
+        uid,
+      );
+      console.info("create session", state.session);
+    });
+
+  const createSocket = () => {
+    state.socket = nakamaClient.createSocket(VITE_CHAT_SSL);
+  };
+
+  return { createSession, createSocket, state };
+}
diff --git a/app/src/stores/Store.tsx b/app/src/stores/Store.tsx
index 6abd0ffc..bcf2a6b0 100644
--- a/app/src/stores/Store.tsx
+++ b/app/src/stores/Store.tsx
@@ -13,6 +13,7 @@ import { userGetByUID, userGetAllByChain, userUpdate } from "../api/user";
 import { chainRemoveUser } from "../api/chain";
 import { IS_WEB } from "../utils/is_web";
 import { cookieUserUID } from "./browser_storage";
+import { RespChatPatchUser } from "../api/chat";
 
 type ChainHeaders = Record<string, string>;
 
@@ -21,6 +22,8 @@ interface StorageAuth {
   token: string;
 }
 
+export type MmData = Partial<RespChatPatchUser>;
+
 export enum IsAuthenticated {
   Unknown,
   LoggedIn,
@@ -70,6 +73,8 @@ export const StoreContext = createContext({
   setRouteListView: (v: RouteListView) => {},
   connError: (err: any) => Promise.resolve(IsAuthenticated.Unknown),
   shouldBlur: false,
+  mmData: {} as MmData,
+  setMmData: (d: MmData) => {},
   toggleChainAllowMap: () => Promise.resolve(),
 });
 
@@ -89,6 +94,7 @@ export function StoreProvider({
     undefined,
   );
   const [chainUsers, setChainUsers] = useState<Array<User>>([]);
+  const [mmData, setMmData] = useState<MmData>({});
   const [listOfChains, setListOfChains] = useState<Array<Chain>>([]);
   const [route, setRoute] = useState<UID[]>([]);
   const [bags, setBags] = useState<Bag[]>([]);
@@ -134,6 +140,7 @@ export function StoreProvider({
     if (version !== 1) {
       await _storage.set("version", 1);
     }
+    setBagListView((await _storage.get("bag_list_view")) || "dynamic");
     _setBagListView((await _storage.get("bag_list_view")) || "dynamic");
     _setBagSort((await _storage.get("bag_sort")) || "aToZ");
     _setRouteListView((await _storage.get("route_list_view")) || "dynamic");
@@ -148,6 +155,8 @@ export function StoreProvider({
     window.axios.defaults.auth = undefined;
     await storage.remove("auth");
     await storage.remove("chain_uid");
+    await storage.remove("mm_token");
+    setMmData({});
     setAuthUser(null);
     _setChain(null);
     setChainHeaders(undefined);
@@ -534,6 +543,8 @@ export function StoreProvider({
         setRouteListView,
         connError,
         shouldBlur,
+        mmData,
+        setMmData,
         toggleChainAllowMap,
       }}
     >
diff --git a/app/src/theme/variables.css b/app/src/theme/variables.css
index 2fa6c4db..0dded519 100644
--- a/app/src/theme/variables.css
+++ b/app/src/theme/variables.css
@@ -194,10 +194,10 @@ http://ionicframework.com/docs/theming/ */
     --ion-color-red-contrast: #f4d7d9;
     --ion-color-red-shade: #280b0d;
     /** blue **/
-    --ion-color-blue: #d6e4f2;
+    --ion-color-blue: #abd4fc;
     --ion-color-blue-contrast: #162e45;
     --ion-color-blue-shade: #0f2030;
-    --ion-color-blue-tint: #eff4fa;
+    --ion-color-blue-tint: #acd1ff;
     /** green **/
     --ion-color-green: #7fb5a7;
     --ion-color-green-contrast: #dbe8e6;
diff --git a/app/src/window.d.ts b/app/src/window.d.ts
index 7bb76178..12fa5026 100644
--- a/app/src/window.d.ts
+++ b/app/src/window.d.ts
@@ -2,6 +2,7 @@ import redaxios from "redaxios";
 import type { OneSignalPlugin } from "onesignal-cordova-plugin";
 import type { Capacitor } from "@capacitor";
 import type { mapboxgl } from "mapbox-gl";
+import type { Channel, Client, Session, Socket } from "@heroiclabs/nakama-js";
 
 declare global {
   var axios: typeof redaxios;
@@ -11,6 +12,10 @@ declare global {
       OneSignal?: OneSignalPlugin;
     };
     Capacitor?: Capacitor;
+    nClient?: Client;
+    nSession?: Session;
+    nSocket?: Socket;
+    nChannel?: Channel;
     mapboxgl: mapboxgl;
   }
 }
diff --git a/bruno/chat/Connect to WebSocket.bru b/bruno/chat/Connect to WebSocket.bru
new file mode 100644
index 00000000..5cacb1a3
--- /dev/null
+++ b/bruno/chat/Connect to WebSocket.bru	
@@ -0,0 +1,16 @@
+meta {
+  name: Connect to WebSocket
+  type: http
+  seq: 2
+}
+
+get {
+  url: ws://localhost:8065/api/v4/websocket?connection_id=&sequence_number=0
+  body: none
+  auth: none
+}
+
+query {
+  connection_id: 
+  sequence_number: 0
+}
diff --git a/bruno/chat/get or join room.bru b/bruno/chat/get or join room.bru
new file mode 100644
index 00000000..f0dcbfe1
--- /dev/null
+++ b/bruno/chat/get or join room.bru	
@@ -0,0 +1,15 @@
+meta {
+  name: get or join room
+  type: http
+  seq: 1
+}
+
+patch {
+  url: {{base}}/v2/chat/{{chainUID}}/room?renew_token=true
+  body: none
+  auth: none
+}
+
+query {
+  renew_token: true
+}
diff --git a/devops/setup-10-mattermost.md b/devops/setup-10-mattermost.md
new file mode 100644
index 00000000..6fd5e627
--- /dev/null
+++ b/devops/setup-10-mattermost.md
@@ -0,0 +1,4 @@
+# Mattermost installation
+
+> This is a list of commands run on the current vps to install and configure mattermost
+
diff --git a/docker-compose.acc.nakama.yml b/docker-compose.acc.nakama.yml
new file mode 100644
index 00000000..b2794eb1
--- /dev/null
+++ b/docker-compose.acc.nakama.yml
@@ -0,0 +1,24 @@
+services:
+  acc_nakama:
+    platform: linux/amd64
+    image: registry.heroiclabs.com/heroiclabs/nakama:3.22.0
+    # NAKAMA_DB=postgres:localdb@nakama_postgres:5432/nakama
+    entrypoint:
+      - "/bin/sh"
+      - "-ecx"
+      - >
+          /nakama/nakama migrate up --database.address $NAKAMA_DB &&
+          exec /nakama/nakama --name nakama1 --database.address $NAKAMA_DB --logger.level DEBUG --config /nakama/data/config.yml
+    restart: always
+    volumes:
+      - nakama_data:/nakama/data
+    # ports:
+    #   - "7349:7349"
+    #   - "7350:7350"
+    #   - "7351:7351"
+    healthcheck:
+      test: ["CMD", "/nakama/nakama", "healthcheck"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+
diff --git a/docker-compose.acc.yml b/docker-compose.acc.yml
index 07baab40..2b1eb2c9 100644
--- a/docker-compose.acc.yml
+++ b/docker-compose.acc.yml
@@ -30,7 +30,6 @@ services:
       interval: 30s
       timeout: 5s
       retries: 5
-      start_period: 1m
     volumes:
       - images_dir:/images/
     environment:
diff --git a/docker-compose.dev.yml b/docker-compose.dev.yml
index 3f7d0c38..7e75f103 100644
--- a/docker-compose.dev.yml
+++ b/docker-compose.dev.yml
@@ -3,8 +3,8 @@ name: cl-dev
 services:
   app:
     image: node:22-alpine
-    ports:
-      - 127.0.0.1:8081:8081
+    # ports:
+    #   - 127.0.0.1:8081:8081
     #   - 5173:5173
     volumes:
       - ./app:/app
@@ -23,8 +23,9 @@ services:
     depends_on:
       - db
       - mailpit
-    ports:
-      - 8084:8084
+      - nakama
+    # ports:
+    #   - 8084:8084
     volumes:
       - ./server:/app
     environment:
@@ -60,13 +61,63 @@ services:
       - MYSQL_PASSWORD=72bd3937e91363a747f810e7
     volumes:
       - mysql:/var/lib/mysql
-      - ./server/sql:/scripts
+      - ../../server/sql:/scripts
+  nakama:
+    platform: linux/amd64
+    image: registry.heroiclabs.com/heroiclabs/nakama:3.22.0
+    entrypoint:
+      - "/bin/sh"
+      - "-ecx"
+      - >
+          /nakama/nakama migrate up --database.address postgres:localdb@nakama_postgres:5432/nakama &&
+          exec /nakama/nakama --name nakama1 --database.address postgres:localdb@nakama_postgres:5432/nakama --logger.level DEBUG --session.token_expiry_sec 7200
+    restart: always
+    links:
+      - nakama_postgres:db
+    depends_on:
+      nakama_postgres:
+        condition: service_healthy
+    volumes:
+      - nakama_data:/nakama/data
+      # - ./nakama:/nakama/data/modules/
+    ports:
+      - "7349:7349"
+      - "7350:7350"
+      - "7351:7351"
+    healthcheck:
+      test: ["CMD", "/nakama/nakama", "healthcheck"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+  nakama_postgres:
+    image: postgres:12.2-alpine
+    environment:
+      - POSTGRES_DB=nakama
+      - POSTGRES_PASSWORD=localdb
+    volumes:
+      - nakama_db:/var/lib/postgresql/data
+    ports:
+      - "5432:5432"
+    healthcheck:
+      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "nakama"]
+      interval: 3s
+      timeout: 3s
+      retries: 5
   caddy:
     build:
       context: ./frontend/
       dockerfile: dev.Dockerfile
+    depends_on:
+      - app
+      - frontend
+      - server
+      - mailpit
     ports:
       # website
       - 127.0.0.1:8080:80
+      - 127.0.0.1:8081:81
+      - 127.0.0.1:8065:85
 volumes:
   mysql:
+  nakama_data:
+  nakama_db:
diff --git a/docker-compose.mm.yml b/docker-compose.mm.yml
deleted file mode 100644
index aff30468..00000000
--- a/docker-compose.mm.yml
+++ /dev/null
@@ -1,10 +0,0 @@
-services:
-  mattermost:
-    platform: linux/amd64
-    image: mattermost/mattermost-preview:9.9.1
-    # ports:
-    #   - 127.0.0.1:8065:8065
-    volumes:
-      - mattermost_prev_db:/var/lib/postgresql/data
-      - mattermost_prev_config:/mm/mattermost/config
-      - mattermost_prev_data:/mm/mattermost-data
diff --git a/frontend/Caddyfile-dev b/frontend/Caddyfile-dev
index f3011601..9de111df 100644
--- a/frontend/Caddyfile-dev
+++ b/frontend/Caddyfile-dev
@@ -15,3 +15,7 @@
       reverse_proxy frontend:3000
    }
 }
+
+:81 {
+	reverse_proxy app:8081
+}
diff --git a/frontend/src/components/react/components/Counters/Counters.tsx b/frontend/src/components/react/components/Counters/Counters.tsx
index 98e15679..fcc9eae4 100644
--- a/frontend/src/components/react/components/Counters/Counters.tsx
+++ b/frontend/src/components/react/components/Counters/Counters.tsx
@@ -99,7 +99,7 @@ export default function Counters() {
         <div>
           <div className="h-20 text-6xl font-serif text-stroke-base-100 flex items-center">
             <a
-              href="https://heyzine.com/flip-book/a8c1962269.html"
+              href="https://heyzine.com/flip-book/0c17a4fe2a.html"
               target="_blank"
               rel="noreferrer"
               className="btn btn-primary btn-circle"
diff --git a/nakama/infosec/README.md b/nakama/infosec/README.md
new file mode 100644
index 00000000..5f895882
--- /dev/null
+++ b/nakama/infosec/README.md
@@ -0,0 +1,5 @@
+# Nakama
+
+This directory contains go tests that attempt to slip into chat locations where they're not supposed to be.
+
+Basically running automated hackery tests.
diff --git a/nakama/infosec/create_account_test.go b/nakama/infosec/create_account_test.go
new file mode 100644
index 00000000..dd3d023a
--- /dev/null
+++ b/nakama/infosec/create_account_test.go
@@ -0,0 +1,29 @@
+package infosec
+
+import (
+	"context"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+)
+
+func TestCreateDoubleUser(t *testing.T) {
+	email := Faker.Internet().Email()
+	username := Faker.Internet().User()
+
+	f := func() error {
+		t.Helper()
+		c := CreateClient()
+		ctx := context.Background()
+		pass := Faker.Internet().Password()
+
+		err := c.AuthenticateEmail(ctx, email, pass, true, username)
+		return err
+	}
+	err1 := f()
+	assert.Nil(t, err1)
+
+	// now run again from a different client and fail
+	err2 := f()
+	assert.Error(t, err2)
+}
diff --git a/nakama/infosec/go.mod b/nakama/infosec/go.mod
new file mode 100644
index 00000000..4db85acd
--- /dev/null
+++ b/nakama/infosec/go.mod
@@ -0,0 +1,18 @@
+module infosec
+
+go 1.23.0
+
+require (
+	github.com/jaswdr/faker v1.19.1
+	github.com/stretchr/testify v1.9.0
+)
+
+require (
+	github.com/ascii8/nakama-go v0.8.7 // indirect
+	github.com/davecgh/go-spew v1.1.1 // indirect
+	github.com/pmezard/go-difflib v1.0.0 // indirect
+	golang.org/x/net v0.19.0 // indirect
+	google.golang.org/protobuf v1.31.0 // indirect
+	gopkg.in/yaml.v3 v3.0.1 // indirect
+	nhooyr.io/websocket v1.8.10 // indirect
+)
diff --git a/nakama/infosec/go.sum b/nakama/infosec/go.sum
new file mode 100644
index 00000000..4081a752
--- /dev/null
+++ b/nakama/infosec/go.sum
@@ -0,0 +1,23 @@
+github.com/ascii8/nakama-go v0.8.7 h1:3P6V29Yw3Q9Il6mpfuNb5ObJSa1Yi19mFfIa1yiUNp0=
+github.com/ascii8/nakama-go v0.8.7/go.mod h1:AolUWpv3vcen2w0MjOfr3BPdMFEXi+KNCCtRgwcW+dA=
+github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
+github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
+github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/jaswdr/faker v1.19.1 h1:xBoz8/O6r0QAR8eEvKJZMdofxiRH+F0M/7MU9eNKhsM=
+github.com/jaswdr/faker v1.19.1/go.mod h1:x7ZlyB1AZqwqKZgyQlnqEG8FDptmHlncA5u2zY/yi6w=
+github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
+github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+golang.org/x/net v0.19.0 h1:zTwKpTd2XuCqf8huc7Fo2iSy+4RHPd10s4KzeTnVr1c=
+golang.org/x/net v0.19.0/go.mod h1:CfAk/cbD4CthTvqiEl8NpboMuiuOYsAr/7NOjZJtv1U=
+golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
+google.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=
+google.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
+gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+nhooyr.io/websocket v1.8.10 h1:mv4p+MnGrLDcPlBoWsvPP7XCzTYMXP9F9eIGoKbgx7Q=
+nhooyr.io/websocket v1.8.10/go.mod h1:rN9OFWIUwuxg4fR5tELlYC04bXYowCP9GX47ivo2l+c=
diff --git a/nakama/infosec/join_group_test.go b/nakama/infosec/join_group_test.go
new file mode 100644
index 00000000..736b134e
--- /dev/null
+++ b/nakama/infosec/join_group_test.go
@@ -0,0 +1,101 @@
+package infosec
+
+import (
+	"context"
+	"testing"
+
+	"github.com/ascii8/nakama-go"
+	"github.com/stretchr/testify/assert"
+	"google.golang.org/protobuf/types/known/wrapperspb"
+)
+
+func TestJoinGroupUnauthorized(t *testing.T) {
+	groupName := Faker.Beer().Name()
+	var group *nakama.Group
+
+	// Create a new group with an authenticated user
+	{
+		c := CreateClient()
+		ctx := context.Background()
+
+		email := Faker.Internet().Email()
+		password := Faker.Internet().Password()
+		username := Faker.Internet().User()
+		err := c.AuthenticateEmail(ctx, email, password, true, username)
+		assert.Nil(t, err)
+		group, err = c.CreateGroup(ctx, &nakama.CreateGroupRequest{
+			Name:        groupName,
+			Description: "",
+			LangTag:     "",
+			AvatarUrl:   "",
+			Open:        true,
+			MaxCount:    0,
+		})
+		assert.Nil(t, err)
+	}
+
+	// Attempt to join with an unauthorized user and fail
+	{
+		c := CreateClient()
+		ctx := context.Background()
+
+		err := c.JoinGroup(ctx, group.Id)
+		assert.Error(t, err)
+	}
+}
+
+func TestJoinOpenGroupWithoutAcceptance(t *testing.T) {
+	groupName := Faker.Beer().Name()
+	var group *nakama.Group
+
+	f := func() (*nakama.Client, context.Context) {
+		t.Helper()
+		c := CreateClient()
+		ctx := context.Background()
+
+		email := Faker.Internet().Email()
+		password := Faker.Asciify("***************")
+		username := Faker.Internet().User()
+		err := c.AuthenticateEmail(ctx, email, password, true, username)
+		assert.Nil(t, err)
+		return c, ctx
+	}
+
+	// Create a new group with an authenticated user
+	{
+		c, ctx := f()
+		var err error
+		group, err = c.CreateGroup(ctx, &nakama.CreateGroupRequest{
+			Name:        groupName,
+			Description: "",
+			LangTag:     "",
+			AvatarUrl:   "",
+			Open:        true,
+			MaxCount:    0,
+		})
+		assert.Nil(t, err)
+	}
+
+	// Attempt to join with a user and retrieve messages to an open group and succeed
+	{
+		c, ctx := f()
+		err := c.JoinGroup(ctx, group.Id)
+		assert.Nil(t, err)
+		res, err := c.GroupUsers(ctx, &nakama.GroupUsersRequest{
+			GroupId: group.Id,
+			Limit:   wrapperspb.Int32(100),
+			// State:   wrapperspb.Int32(int32(nakama.UserRoleState_ADMIN)),
+			Cursor: "",
+		})
+		assert.Nil(t, err)
+		account, _ := c.Account(ctx)
+		found := false
+		for _, v := range res.GroupUsers {
+			if v.User.Id == account.User.Id {
+				assert.Equal(t, int32(nakama.UserRoleState_MEMBER), v.State.Value)
+				found = true
+			}
+		}
+		assert.True(t, found, "Could not find user in group")
+	}
+}
diff --git a/nakama/infosec/tools.go b/nakama/infosec/tools.go
new file mode 100644
index 00000000..37b6744e
--- /dev/null
+++ b/nakama/infosec/tools.go
@@ -0,0 +1,12 @@
+package infosec
+
+import (
+	"github.com/ascii8/nakama-go"
+	"github.com/jaswdr/faker"
+)
+
+var Faker = faker.New()
+
+func CreateClient() *nakama.Client {
+	return nakama.New(nakama.WithURL("http://localhost:7350"), nakama.WithServerKey("defaultkey"))
+}
diff --git a/server/Dockerfile b/server/Dockerfile
index 914bcae1..e933f02d 100644
--- a/server/Dockerfile
+++ b/server/Dockerfile
@@ -6,4 +6,4 @@ RUN go mod download
 COPY . .
 RUN go build -o server cmd/server/main.go
 
-ENTRYPOINT ./server
\ No newline at end of file
+ENTRYPOINT ./server
diff --git a/server/Dockerfile.mmmail b/server/Dockerfile.mmmail
new file mode 100644
index 00000000..cc910466
--- /dev/null
+++ b/server/Dockerfile.mmmail
@@ -0,0 +1,9 @@
+FROM golang:1.22.3-alpine
+WORKDIR /app
+COPY go.mod go.sum ./
+RUN go mod download
+
+COPY . .
+RUN go build -o mmmail cmd/mm-mail/main.go
+
+ENTRYPOINT ./mmmail
diff --git a/server/cmd/get-user-coords-and-country/main.go b/server/cmd/get-user-coords-and-country/main.go
deleted file mode 100644
index b0ab6bbb..00000000
--- a/server/cmd/get-user-coords-and-country/main.go
+++ /dev/null
@@ -1,209 +0,0 @@
-package main
-
-import (
-	"encoding/json"
-	"flag"
-	"fmt"
-	"net/http"
-	"net/url"
-	"os"
-	"strings"
-	"time"
-
-	"github.com/the-clothing-loop/website/server/internal/app"
-	"github.com/the-clothing-loop/website/server/internal/models"
-	"gorm.io/gorm"
-)
-
-const (
-	GeoJsonLatitude  = 1
-	GeoJsonLongitude = 0
-)
-
-type GeoObject struct {
-	Type      string   `json:"type"`
-	PlaceType []string `json:"place_type"`
-	Relevance float64  `json:"relevance"`
-
-	Properties struct {
-		Accuracy string `json:"accuracy"`
-		MapboxID string `json:"mapbox_id"`
-	} `json:"properties"`
-
-	Text      string    `json:"text"`
-	PlaceName string    `json:"place_name"`
-	Center    []float64 `json:"center"`
-
-	Geometry struct {
-		Type        string    `json:"type"`
-		Coordinates []float64 `json:"coordinates"`
-	} `json:"geometry"`
-
-	Address string `json:"address"`
-
-	Context []struct {
-		ID        string `json:"id"`
-		MapboxID  string `json:"mapbox_id"`
-		Text      string `json:"text"`
-		Wikidata  string `json:"wikidata,omitempty"`
-		ShortCode string `json:"short_code,omitempty"`
-	} `json:"context"`
-}
-
-type GeoObjectCollection struct {
-	Type        string      `json:"type"`
-	Query       []string    `json:"query"`
-	Features    []GeoObject `json:"features"`
-	Attribution string      `json:"attribution"`
-}
-
-type MapkitResponse struct {
-	Results []MapkitResult `json:"results"`
-}
-type MapkitResult struct {
-	Center struct {
-		Latitude  float64 `json:"lat"`
-		Longitude float64 `json:"lng"`
-	} `json:"center"`
-	DisplayMapRegion struct {
-		SouthLat float64 `json:"southLat"`
-		WestLat  float64 `json:"westLat"`
-		NorthLat float64 `json:"northLat"`
-		EastLat  float64 `json:"eastLat"`
-	} `json:"displayMapRegion"`
-	Name                   string   `json:"name"`
-	FormattedAddressLines  []string `json:"formattedAddressLines"`
-	AdministrativeArea     string   `json:"administrativeArea"`
-	Locality               string   `json:"locality"`
-	PostCode               string   `json:"postCode"`
-	ThoroughFare           string   `json:"thoroughFare"`
-	SubThoroughFare        string   `json:"subThoroughFare"`
-	FullThoroghFare        string   `json:"fullThoroFare"`
-	Country                string   `json:"country"`
-	CountryCode            string   `json:"countryCode"`
-	GeocodeAccuracy        string   `json:"geocodeAccuracy"`
-	Timezone               string   `json:"timezone"`
-	TimezoneSecondsFromGmt int      `json:"timezoneSecondsFromGmt"`
-	PlacecardUrl           string   `json:"placecardUrl"`
-	Iso3166                struct {
-		CountryCode     string `json:"countryCode"`
-		SubdivisionCode string `json:"subdivisionCode"`
-	} `json:"iso3166"`
-}
-
-func main() {
-	mbToken := flag.String("mb-token", "", "mapbox api token")
-	// startflag := flag.Int("start", 1, "start of user_ids to check")
-	// endflag := flag.Int("end", 1, "end of user_ids to check")
-	flag.Parse()
-
-	os.Setenv("SERVER_NO_MIGRATE", "true")
-	app.ConfigInit(".")
-	db := app.DatabaseInit()
-
-	users := []models.User{}
-	db.Raw("SELECT * FROM users WHERE latitude = 0 AND longitude = 0").Scan(&users)
-	fmt.Printf("Found %d users\n", len(users))
-
-	apiCount := 0
-	apiCountP := &apiCount
-	defer func() {
-		fmt.Printf("API count: %d\n", *apiCountP)
-	}()
-
-	httpClient := &http.Client{Timeout: 3 * time.Second}
-	for _, user := range users {
-		if user.Address == "" {
-			fmt.Printf("[%d] Address is empty '%s'\n", user.ID, strings.ReplaceAll(user.Address, "\n", " "))
-		} else if user.Latitude == 0 || user.Longitude == 0 {
-			*apiCountP += 1
-			lat, long, next := getLatLongFromAppleMapkit(httpClient, db, mbToken, user.Latitude, user.Longitude, user.Address, user.ID)
-			if !next {
-				return
-			}
-			if lat != 0 && long != 0 {
-				user.Latitude = lat
-				user.Longitude = long
-				db.Exec(`UPDATE users SET longitude_migration = ?, latitude_migration = ? WHERE id = ?`, user.Longitude, user.Latitude, user.ID)
-			}
-		} else {
-			fmt.Printf("[%d] Skipped address %s, since there's already coords set\n", user.ID, strings.ReplaceAll(user.Address, "\n", " "))
-		}
-	}
-}
-
-// // Retrieve data from Mapbox geolocation service
-// // The token in found your the account page
-// func getLatLongFromMapbox(httpClient *http.Client, db *gorm.DB, mbToken *string, inLat, inLong float64, address string, userID uint) (lat, long float64, next bool) {
-// 	// Send request
-// 	res, err := httpClient.Get(fmt.Sprintf("https://api.mapbox.com/geocoding/v5/mapbox.places/%s.json?types=address&language=en&access_token=%s", url.QueryEscape(address), *mbToken))
-
-// 	if err != nil {
-// 		fmt.Printf("[%d] HTTP client returned error: %e\n", userID, err)
-// 		return 0, 0, false
-// 	}
-
-// 	// Retrieve the latitude and longitude
-// 	decoder := json.NewDecoder(res.Body)
-
-// 	var geoObjectCollection GeoObjectCollection
-// 	if err := decoder.Decode(&geoObjectCollection); err != nil {
-// 		fmt.Printf("[%d] Error parsing JSON: %e\n", userID, err)
-// 		return 0, 0, false
-// 	}
-
-// 	if len(geoObjectCollection.Features) > 0 {
-// 		if len(geoObjectCollection.Features[0].Geometry.Coordinates) > 0 {
-// 			fmt.Printf("[%d] Found result Lat: % 10f Lon: % 10f Address: %s\n",
-// 				userID,
-// 				geoObjectCollection.Features[0].Geometry.Coordinates[GeoJsonLatitude],
-// 				geoObjectCollection.Features[0].Geometry.Coordinates[GeoJsonLongitude],
-// 				strings.ReplaceAll(address, "\n", " "),
-// 			)
-// 			lat = geoObjectCollection.Features[0].Geometry.Coordinates[GeoJsonLatitude]
-// 			long = geoObjectCollection.Features[0].Geometry.Coordinates[GeoJsonLongitude]
-// 			return lat, long, true
-// 		}
-// 	} else {
-// 		fmt.Printf("[%d] Found no results for address %s\n", userID, strings.ReplaceAll(address, "\n", " "))
-// 	}
-// 	return 0, 0, true
-// }
-
-// Retrieve data from Apple's map api service
-// The token is available from https://gps-coordinates.org/ see the Network tab.
-func getLatLongFromAppleMapkit(httpClient *http.Client, db *gorm.DB, mbToken *string, inLat, inLong float64, address string, userID uint) (lat, long float64, next bool) {
-	// Send request
-	url := fmt.Sprintf("https://api.apple-mapkit.com/v1/geocode?q=%s&lang=en-GB", url.QueryEscape(address))
-	req, _ := http.NewRequest("GET", url, nil)
-	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", *mbToken))
-
-	res, err := httpClient.Do(req)
-	if err != nil {
-		fmt.Printf("[%d] HTTP client returned error: %e\n", userID, err)
-		return 0, 0, false
-	}
-
-	if res.StatusCode != 200 {
-		fmt.Printf("[%d] Status code not ok returned: %d\n", userID, res.StatusCode)
-		return 0, 0, false
-	}
-
-	// Retrieve the latitude and longitude
-	decoder := json.NewDecoder(res.Body)
-
-	var mapkitRes MapkitResponse
-	if err := decoder.Decode(&mapkitRes); err != nil {
-		fmt.Printf("[%d] Error parsing JSON: %e\n", userID, err)
-		return 0, 0, false
-	}
-
-	if len(mapkitRes.Results) > 0 {
-		lat = mapkitRes.Results[0].Center.Latitude
-		long = mapkitRes.Results[0].Center.Longitude
-		return lat, long, true
-	} else {
-		fmt.Printf("[%d] Found no results for address %s\n", userID, strings.ReplaceAll(address, "\n", " "))
-	}
-	return 0, 0, true
-}
diff --git a/server/cmd/server/main.go b/server/cmd/server/main.go
index d27af567..ffed634d 100644
--- a/server/cmd/server/main.go
+++ b/server/cmd/server/main.go
@@ -13,6 +13,9 @@ import (
 
 func main() {
 	app.ConfigInit(".")
+	if app.Config.JWT_SECRET == "" {
+		panic(fmt.Errorf("no jwt secret in config file: %v", app.Config))
+	}
 
 	if app.Config.ENV == app.EnvEnumProduction || app.Config.ENV == app.EnvEnumAcceptance {
 		flag.Set("log_dir", "/var/log/clothingloop-api/")
diff --git a/server/config.example.yml b/server/config.example.yml
index 5ccd63d2..5adcf32c 100644
--- a/server/config.example.yml
+++ b/server/config.example.yml
@@ -26,3 +26,12 @@ smtp_pass: ""
 
 goscope2_user: "admin"
 goscope2_pass: "admin"
+
+mattermost_url: "http://mattermost:8065"
+# 1. Enable personal access tokens in System Console > Integrations > Integration Management.
+# 2. Sign in to the admin user account to create a personal access token.
+# 3. Go to Profile > Security > Personal Access Tokens, then select Create Token.
+mattermost_token: "secret"
+mattermost_smtp_host: "mattermost_mail"
+mattermost_smtp_port: 2525
+images_dir: "./images"
diff --git a/server/docs/mattermost_setup.md b/server/docs/mattermost_setup.md
new file mode 100644
index 00000000..7946a80f
--- /dev/null
+++ b/server/docs/mattermost_setup.md
@@ -0,0 +1,19 @@
+# Mattermost setup for development
+
+**`/admin_console/environment/web_server`**:
+
+| Label | Value |
+| ---| --- |
+| Site URL | `http://localhost:8065` |
+| Enable Insecure Outgoing Connections | true |
+
+**`/admin_console/integrations/integration_management`**:
+
+| Label | Value |
+| ---| --- |
+| Enable Personal Access Tokens | true |
+
+**`/`**:
+
+1. Right most item in the header -> Profile -> Security -> Personal Access Tokens -> Edit -> Create Token
+2. Save details
diff --git a/server/go.mod b/server/go.mod
index e1c79723..11a4ce0c 100644
--- a/server/go.mod
+++ b/server/go.mod
@@ -1,74 +1,111 @@
 module github.com/the-clothing-loop/website/server
 
-go 1.22
+go 1.22.3
+
+toolchain go1.23.0
 
 require (
 	github.com/0xch4z/selectr v0.2.0
-	github.com/GGP1/atoll v0.6.0
+	github.com/GGP1/atoll v0.7.0
 	github.com/OneSignal/onesignal-go-api v1.0.4
-	github.com/arran4/golang-ical v0.0.0-20230425234049-f69e132f2b0c
+	github.com/arran4/golang-ical v0.3.1
 	github.com/cdfmlr/ellipsis v0.0.1
 	github.com/disintegration/imaging v1.6.2
-	github.com/getbrevo/brevo-go v1.0.0
-	github.com/gin-gonic/gin v1.9.1
-	github.com/go-co-op/gocron v1.29.0
-	github.com/go-playground/validator/v10 v10.14.1
-	github.com/golang-jwt/jwt/v5 v5.2.0
-	github.com/jaswdr/faker v1.18.0
+	github.com/getbrevo/brevo-go v1.1.2
+	github.com/gin-gonic/gin v1.10.0
+	github.com/go-co-op/gocron v1.37.0
+	github.com/go-playground/validator/v10 v10.22.0
+	github.com/golang-jwt/jwt/v5 v5.2.1
+	github.com/jaswdr/faker v1.19.1
 	github.com/jinzhu/configor v1.2.2
-	github.com/microcosm-cc/bluemonday v1.0.26
+	github.com/mattermost/mattermost/server/public v0.1.6
+	github.com/mhale/smtpd v0.8.3
+	github.com/microcosm-cc/bluemonday v1.0.27
 	github.com/patrickmn/go-cache v2.1.0+incompatible
-	github.com/samber/lo v1.38.1
+	github.com/samber/lo v1.47.0
 	github.com/satori/go.uuid v1.2.0
 	github.com/shopspring/decimal v1.4.0
-	github.com/stretchr/testify v1.8.4
+	github.com/stretchr/testify v1.9.0
 	github.com/stripe/stripe-go/v73 v73.16.0
-	github.com/wneessen/go-mail v0.3.9
+	github.com/wneessen/go-mail v0.4.4
 	golang.design/x/go2generics v0.0.1
-	golang.org/x/crypto v0.21.0
-	golang.org/x/net v0.23.0
+	golang.org/x/crypto v0.26.0
+	golang.org/x/net v0.28.0
 	gopkg.in/guregu/null.v3 v3.5.0
-	gorm.io/driver/mysql v1.5.1
-	gorm.io/gorm v1.25.1
+	gorm.io/driver/mysql v1.5.7
+	gorm.io/gorm v1.25.11
 )
 
 require (
-	github.com/BurntSushi/toml v1.2.0 // indirect
+	filippo.io/edwards25519 v1.1.0 // indirect
+	github.com/BurntSushi/toml v1.4.0 // indirect
 	github.com/antihax/optional v1.0.0 // indirect
+	github.com/ascii8/nakama-go v0.8.7 // indirect
 	github.com/aymerick/douceur v0.2.0 // indirect
-	github.com/bytedance/sonic v1.9.1 // indirect
-	github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect
-	github.com/davecgh/go-spew v1.1.1 // indirect
-	github.com/gabriel-vasile/mimetype v1.4.2 // indirect
+	github.com/blang/semver/v4 v4.0.0 // indirect
+	github.com/bytedance/sonic v1.12.2 // indirect
+	github.com/bytedance/sonic/loader v0.2.0 // indirect
+	github.com/cloudwego/base64x v0.1.4 // indirect
+	github.com/cloudwego/iasm v0.2.0 // indirect
+	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
+	github.com/dyatlov/go-opengraph/opengraph v0.0.0-20220524092352-606d7b1e5f8a // indirect
+	github.com/fatih/color v1.17.0 // indirect
+	github.com/francoispqt/gojay v1.2.13 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.5 // indirect
 	github.com/gin-contrib/sse v0.1.0 // indirect
+	github.com/go-asn1-ber/asn1-ber v1.5.7 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
-	github.com/go-sql-driver/mysql v1.7.1 // indirect
-	github.com/goccy/go-json v0.10.2 // indirect
-	github.com/golang/protobuf v1.5.3 // indirect
-	github.com/google/go-cmp v0.5.9 // indirect
-	github.com/gorilla/css v1.0.0 // indirect
+	github.com/go-sql-driver/mysql v1.8.1 // indirect
+	github.com/goccy/go-json v0.10.3 // indirect
+	github.com/golang/protobuf v1.5.4 // indirect
+	github.com/google/uuid v1.6.0 // indirect
+	github.com/gorilla/css v1.0.1 // indirect
+	github.com/gorilla/websocket v1.5.3 // indirect
+	github.com/hashicorp/errwrap v1.1.0 // indirect
+	github.com/hashicorp/go-hclog v1.6.3 // indirect
+	github.com/hashicorp/go-multierror v1.1.1 // indirect
+	github.com/hashicorp/go-plugin v1.6.1 // indirect
+	github.com/hashicorp/yamux v0.1.1 // indirect
 	github.com/jinzhu/inflection v1.0.0 // indirect
 	github.com/jinzhu/now v1.1.5 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
-	github.com/klauspost/cpuid/v2 v2.2.5 // indirect
-	github.com/leodido/go-urn v1.2.4 // indirect
-	github.com/mattn/go-isatty v0.0.19 // indirect
+	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
+	github.com/leodido/go-urn v1.4.0 // indirect
+	github.com/mattermost/go-i18n v1.11.1-0.20211013152124-5c415071e404 // indirect
+	github.com/mattermost/ldap v0.0.0-20231116144001-0f480c025956 // indirect
+	github.com/mattermost/logr/v2 v2.0.21 // indirect
+	github.com/mattn/go-colorable v0.1.13 // indirect
+	github.com/mattn/go-isatty v0.0.20 // indirect
+	github.com/mitchellh/go-testing-interface v1.14.1 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
-	github.com/pelletier/go-toml/v2 v2.0.8 // indirect
-	github.com/pmezard/go-difflib v1.0.0 // indirect
+	github.com/oklog/run v1.1.0 // indirect
+	github.com/pborman/uuid v1.2.1 // indirect
+	github.com/pelletier/go-toml v1.9.5 // indirect
+	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
+	github.com/philhofer/fwd v1.1.3-0.20240612014219-fbbf4953d986 // indirect
+	github.com/pkg/errors v0.9.1 // indirect
+	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
 	github.com/robfig/cron/v3 v3.0.1 // indirect
+	github.com/tinylib/msgp v1.2.0 // indirect
 	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
-	github.com/ugorji/go/codec v1.2.11 // indirect
-	go.uber.org/atomic v1.9.0 // indirect
-	golang.org/x/arch v0.3.0 // indirect
-	golang.org/x/exp v0.0.0-20220303212507-bbda1eaf7a17 // indirect
-	golang.org/x/image v0.18.0 // indirect
-	golang.org/x/oauth2 v0.9.0 // indirect
-	golang.org/x/sys v0.18.0 // indirect
-	golang.org/x/text v0.16.0 // indirect
-	google.golang.org/appengine v1.6.7 // indirect
-	google.golang.org/protobuf v1.33.0 // indirect
+	github.com/ugorji/go/codec v1.2.12 // indirect
+	github.com/vmihailenco/msgpack/v5 v5.4.1 // indirect
+	github.com/vmihailenco/tagparser/v2 v2.0.0 // indirect
+	github.com/wiggin77/merror v1.0.5 // indirect
+	github.com/wiggin77/srslog v1.0.1 // indirect
+	go.uber.org/atomic v1.11.0 // indirect
+	golang.org/x/arch v0.10.0 // indirect
+	golang.org/x/image v0.20.0 // indirect
+	golang.org/x/oauth2 v0.23.0 // indirect
+	golang.org/x/sys v0.25.0 // indirect
+	golang.org/x/text v0.18.0 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect
+	google.golang.org/grpc v1.66.0 // indirect
+	google.golang.org/protobuf v1.34.2 // indirect
+	gopkg.in/natefinch/lumberjack.v2 v2.2.1 // indirect
+	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
+	nhooyr.io/websocket v1.8.10 // indirect
 )
diff --git a/server/go.sum b/server/go.sum
index 6cc41b8d..6ec3f0ca 100644
--- a/server/go.sum
+++ b/server/go.sum
@@ -1,5 +1,7 @@
 cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.31.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
 cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.37.0/go.mod h1:TS1dMSSfndXH133OKGwekG838Om/cQT0BUHV3HcBgoo=
 cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=
 cloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=
 cloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=
@@ -30,57 +32,95 @@ cloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0Zeo
 cloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=
 cloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=
 cloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=
+dmitri.shuralyov.com/app/changes v0.0.0-20180602232624-0a106ad413e3/go.mod h1:Yl+fi1br7+Rr3LqpNJf1/uxUdtRUV+Tnj0o93V2B9MU=
 dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=
+dmitri.shuralyov.com/html/belt v0.0.0-20180602232347-f7d459c86be0/go.mod h1:JLBrvjyP0v+ecvNYvCpyZgu5/xkfAUhi6wJj28eUfSU=
+dmitri.shuralyov.com/service/change v0.0.0-20181023043359-a85b471d5412/go.mod h1:a1inKt/atXimZ4Mv927x+r7UpyzRUf4emIoiiSC2TN4=
+dmitri.shuralyov.com/state v0.0.0-20180228185332-28bcc343414c/go.mod h1:0PRwlb0D6DFvNNtx+9ybjezNCa8XF0xaYcETyp6rHWU=
+filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=
+filippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=
+git.apache.org/thrift.git v0.0.0-20180902110319-2566ecd5d999/go.mod h1:fPE2ZNJGynbRyZ4dJvy6G277gSllfV2HJqblrnkyeyg=
 github.com/0xch4z/selectr v0.2.0 h1:xSHNLL17FiMdM6a5oCuWqCy9X2v1mAOER0p+tKjPYL0=
 github.com/0xch4z/selectr v0.2.0/go.mod h1:YLfLQMOdluwpWog1DS6g2mpkyEAlsGzXkjPRGeT+nig=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
-github.com/BurntSushi/toml v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=
 github.com/BurntSushi/toml v1.2.0/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=
+github.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=
+github.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=
 github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=
-github.com/GGP1/atoll v0.6.0 h1:O0vUrdqF/lC9l7iSBqJdQRPt+TNvluAAZ2eq0emRPFY=
-github.com/GGP1/atoll v0.6.0/go.mod h1:0ara0O+YfFSlqcKubEu4UJfTzy/wz7OAHs38K7P5CvU=
+github.com/GGP1/atoll v0.7.0 h1:qIo6aIJtViWcZx7lQ/cRwAg2TpuqVS23r/rsSZwzfeI=
+github.com/GGP1/atoll v0.7.0/go.mod h1:t1D8dwqO+DJjdtA7B60hXBG7b3hJJEDS3kV9KHHRc3M=
 github.com/OneSignal/onesignal-go-api v1.0.4 h1:qSfVA5BMVEM92CSO6oeiQHPjxT1URcFpTGTMH8r8qLg=
 github.com/OneSignal/onesignal-go-api v1.0.4/go.mod h1:DtIjUAJD9iw/clqpJ7mGff1soWkgbs/2m7Or85W/I7c=
+github.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=
 github.com/antihax/optional v1.0.0 h1:xK2lYat7ZLaVVcIuj82J8kIro4V6kDe0AUDFboUCwcg=
 github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
-github.com/arran4/golang-ical v0.0.0-20230425234049-f69e132f2b0c h1:bmHPCBB1T8YZpQI+Ch0RuICrozVFmPAjiBQZvAjtpRI=
-github.com/arran4/golang-ical v0.0.0-20230425234049-f69e132f2b0c/go.mod h1:BSTTrYHuM12oAL8jDdcmPdw02SBThKYWNFHQlvEG6b0=
+github.com/arran4/golang-ical v0.3.1 h1:v13B3eQZ9VDHTAvT6M11vVzxYgcYmjyPBE2eAZl3VZk=
+github.com/arran4/golang-ical v0.3.1/go.mod h1:LZWxF8ZIu/sjBVUCV0udiVPrQAgq3V0aa0RfbO99Qkk=
+github.com/ascii8/nakama-go v0.8.7 h1:3P6V29Yw3Q9Il6mpfuNb5ObJSa1Yi19mFfIa1yiUNp0=
+github.com/ascii8/nakama-go v0.8.7/go.mod h1:AolUWpv3vcen2w0MjOfr3BPdMFEXi+KNCCtRgwcW+dA=
 github.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=
 github.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=
-github.com/bytedance/sonic v1.5.0/go.mod h1:ED5hyg4y6t3/9Ku1R6dU/4KyJ48DZ4jPhfY1O2AihPM=
-github.com/bytedance/sonic v1.9.1 h1:6iJ6NqdoxCDr6mbY8h18oSO+cShGSMRGCEo7F2h0x8s=
-github.com/bytedance/sonic v1.9.1/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=
+github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
+github.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=
+github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
+github.com/bradfitz/go-smtpd v0.0.0-20170404230938-deb6d6237625/go.mod h1:HYsPBTaaSFSlLx/70C2HPIMNZpVV8+vt/A+FMnYP11g=
+github.com/bufbuild/protocompile v0.4.0 h1:LbFKd2XowZvQ/kajzguUp2DC9UEIQhIq77fZZlaQsNA=
+github.com/bufbuild/protocompile v0.4.0/go.mod h1:3v93+mbWn/v3xzN+31nwkJfrEpAUwp+BagBSZWx+TP8=
+github.com/buger/jsonparser v0.0.0-20181115193947-bf1c66bbce23/go.mod h1:bbYlZJ7hK1yFx9hf58LP0zeX7UjIGs20ufpu3evjr+s=
+github.com/bytedance/sonic v1.12.2 h1:oaMFuRTpMHYLpCntGca65YWt5ny+wAceDERTkT2L9lg=
+github.com/bytedance/sonic v1.12.2/go.mod h1:B8Gt/XvtZ3Fqj+iSKMypzymZxw/FVwgIGKzMzT9r/rk=
+github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
+github.com/bytedance/sonic/loader v0.2.0 h1:zNprn+lsIP06C/IqCHs3gPQIvnvpKbbxyXQP1iU4kWM=
+github.com/bytedance/sonic/loader v0.2.0/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
 github.com/cdfmlr/ellipsis v0.0.1 h1:4pwrPbKPMd4mXSdJA4CSRjgEzCbXyRiFBkmgg2KclBI=
 github.com/cdfmlr/ellipsis v0.0.1/go.mod h1:hulYx9m/7Edoo2AkRzkJ/YPDlLB45BgjitI3z0sMVFI=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
-github.com/chenzhuoyu/base64x v0.0.0-20211019084208-fb5309c8db06/go.mod h1:DH46F32mSOjUmXrMHnKwZdA8wcEefY7UVqBKYGjpdQY=
-github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 h1:qSGYFH7+jGhDF8vLC+iwCD4WpbV1EBDSzWkJODFLams=
-github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311/go.mod h1:b583jCggY9gE99b6G5LEC39OIiVsWj+R97kbl5odCEk=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
 github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
 github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
+github.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=
+github.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
+github.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=
+github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
+github.com/coreos/go-systemd v0.0.0-20181012123002-c6f51f82210d/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
+github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/disintegration/imaging v1.6.2 h1:w1LecBlG2Lnp8B3jk5zSuNqd7b4DXhcjwek1ei82L+c=
 github.com/disintegration/imaging v1.6.2/go.mod h1:44/5580QXChDfwIclfc/PCwrr44amcmDAg8hxG0Ewe4=
+github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
+github.com/dyatlov/go-opengraph/opengraph v0.0.0-20220524092352-606d7b1e5f8a h1:etIrTD8BQqzColk9nKRusM9um5+1q0iOEJLqfBMIK64=
+github.com/dyatlov/go-opengraph/opengraph v0.0.0-20220524092352-606d7b1e5f8a/go.mod h1:emQhSYTXqB0xxjLITTw4EaWZ+8IIQYw+kx9GqNUKdLg=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
-github.com/gabriel-vasile/mimetype v1.4.2 h1:w5qFW6JKBz9Y393Y4q372O9A7cUSequkh1Q7OhCmWKU=
-github.com/gabriel-vasile/mimetype v1.4.2/go.mod h1:zApsH/mKG4w07erKIaJPFiX0Tsq9BFQgN3qGY5GnNgA=
-github.com/getbrevo/brevo-go v1.0.0 h1:E/pRCsQeExvZeTCJU5vy+xHWcLaL5axWQ9QkxjlFke4=
-github.com/getbrevo/brevo-go v1.0.0/go.mod h1:2TBMEnaDqq/oiAXUYtn6eykiEdHcEoS7tc63+YoFibw=
+github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=
+github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
+github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
+github.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=
+github.com/francoispqt/gojay v1.2.13 h1:d2m3sFjloqoIUQU3TsHBgj6qg/BVGlTBeHDUmyJnXKk=
+github.com/francoispqt/gojay v1.2.13/go.mod h1:ehT5mTG4ua4581f1++1WLG0vPdaA9HaiDsoyrBGkyDY=
+github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
+github.com/gabriel-vasile/mimetype v1.4.5 h1:J7wGKdGu33ocBOhGy0z653k/lFKLFDPJMG8Gql0kxn4=
+github.com/gabriel-vasile/mimetype v1.4.5/go.mod h1:ibHel+/kbxn9x2407k1izTA1S81ku1z/DlgOW2QE0M4=
+github.com/getbrevo/brevo-go v1.1.2 h1:xvSE2GmJONnRQi1etiZ1YTA7InqVqVnas/Mtpj3VENs=
+github.com/getbrevo/brevo-go v1.1.2/go.mod h1:ExhytIoPxt/cOBl6ZEMeEZNLUKrWEYA5U3hM/8WP2bg=
+github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
 github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
 github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
-github.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=
-github.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=
-github.com/go-co-op/gocron v1.29.0 h1:HHKBSnCqurMw8eENEcBIDGwoU1TY7wkH1CKzf1Rm/3M=
-github.com/go-co-op/gocron v1.29.0/go.mod h1:39f6KNSGVOU1LO/ZOoZfcSxwlsJDQOKSu8erN0SH48Y=
+github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
+github.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
+github.com/gliderlabs/ssh v0.1.1/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=
+github.com/go-asn1-ber/asn1-ber v1.5.7 h1:DTX+lbVTWaTw1hQ+PbZPlnDZPEIs0SS/GCZAl535dDk=
+github.com/go-asn1-ber/asn1-ber v1.5.7/go.mod h1:hEBeB/ic+5LoWskz+yKT7vGhhPYkProFKoKdwZRWMe0=
+github.com/go-co-op/gocron v1.37.0 h1:ZYDJGtQ4OMhTLKOKMIch+/CY70Brbb1dGdooLEhh7b0=
+github.com/go-co-op/gocron v1.37.0/go.mod h1:3L/n6BkO7ABj+TrfSVXLRzsP26zmikL4ISkLQ0O8iNY=
+github.com/go-errors/errors v1.0.1/go.mod h1:f4zRHt4oKfwPJE5k8C9vpYG+aDHdBFUsgrm6/TyX73Q=
 github.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=
 github.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
 github.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
@@ -90,19 +130,21 @@ github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/o
 github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
 github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
 github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
-github.com/go-playground/validator/v10 v10.14.1 h1:9c50NUPC30zyuKprjL3vNZ0m5oG+jU0zvx4AqHGnv4k=
-github.com/go-playground/validator/v10 v10.14.1/go.mod h1:9iXMNT7sEkjXb0I+enO7QXmzG6QCsPWY4zveKFVRSyU=
+github.com/go-playground/validator/v10 v10.22.0 h1:k6HsTZ0sTnROkhS//R0O+55JgM8C4Bx7ia+JlgcnOao=
+github.com/go-playground/validator/v10 v10.22.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
 github.com/go-sql-driver/mysql v1.7.0/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=
-github.com/go-sql-driver/mysql v1.7.1 h1:lUIinVbN1DY0xBg0eMOzmmtGoHwWBbvnWubQUrtU8EI=
-github.com/go-sql-driver/mysql v1.7.1/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=
-github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=
-github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
-github.com/golang-jwt/jwt/v5 v5.2.0 h1:d/ix8ftRUorsN+5eMIlF4T6J8CAt9rch3My2winC1Jw=
-github.com/golang-jwt/jwt/v5 v5.2.0/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
+github.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=
+github.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=
+github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
+github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
+github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
+github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
+github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:tluoj9z5200jBnyusfRPU2LqT6J+DAorxEvtC7LHB+E=
 github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=
@@ -123,9 +165,8 @@ github.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:W
 github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=
 github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=
 github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
-github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
-github.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=
-github.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
+github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
+github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
@@ -135,9 +176,10 @@ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/
 github.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
-github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
+github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=
+github.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
 github.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=
@@ -149,112 +191,232 @@ github.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hf
 github.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
 github.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
 github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
+github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/google/uuid v1.4.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+github.com/googleapis/gax-go v2.0.0+incompatible/go.mod h1:SFVmujtThgffbyetf+mdk2eWhX2bMyUtNHzFKcPA9HY=
+github.com/googleapis/gax-go/v2 v2.0.3/go.mod h1:LLvjysVCY1JZeum8Z6l8qUty8fiNwE08qbEPm1M08qg=
 github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=
 github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=
-github.com/gorilla/css v1.0.0 h1:BQqNyPTi50JCFMTw/b67hByjMVXZRwGha6wxVGkeihY=
-github.com/gorilla/css v1.0.0/go.mod h1:Dn721qIggHpt4+EFCcTLTU/vk5ySda2ReITrtgBl60c=
+github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
+github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=
+github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=
+github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
+github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
+github.com/grpc-ecosystem/grpc-gateway v1.5.0/go.mod h1:RSKVYQBd5MCa4OVpNdGskqpgL2+G+NZTnrVHpWWfpdw=
+github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
+github.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=
+github.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
+github.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=
+github.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=
+github.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=
+github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=
+github.com/hashicorp/go-plugin v1.6.1 h1:P7MR2UP6gNKGPp+y7EZw2kOiq4IR9WiqLvp0XOsVdwI=
+github.com/hashicorp/go-plugin v1.6.1/go.mod h1:XPHFku2tFo3o3QKFgSYo+cghcUhw1NA1hZyMK0PWAw0=
 github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
 github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
+github.com/hashicorp/yamux v0.1.1 h1:yrQxtgseBDrq9Y652vSRDvsKCJKOUD+GzTS4Y0Y8pvE=
+github.com/hashicorp/yamux v0.1.1/go.mod h1:CtWFDAQgb7dxtzFs4tWbplKIe2jSi3+5vKbgIO0SLnQ=
 github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
-github.com/jaswdr/faker v1.18.0 h1:sJ8HQLxvNRH+Ond1pTLR01BAxMN0iuYe+6aD30H0cRE=
-github.com/jaswdr/faker v1.18.0/go.mod h1:x7ZlyB1AZqwqKZgyQlnqEG8FDptmHlncA5u2zY/yi6w=
+github.com/jaswdr/faker v1.19.1 h1:xBoz8/O6r0QAR8eEvKJZMdofxiRH+F0M/7MU9eNKhsM=
+github.com/jaswdr/faker v1.19.1/go.mod h1:x7ZlyB1AZqwqKZgyQlnqEG8FDptmHlncA5u2zY/yi6w=
+github.com/jellevandenhooff/dkim v0.0.0-20150330215556-f50fe3d243e1/go.mod h1:E0B/fFc00Y+Rasa88328GlI/XbtyysCtTHZS8h7IrBU=
+github.com/jhump/protoreflect v1.15.1 h1:HUMERORf3I3ZdX05WaQ6MIpd/NJ434hTp5YiKgfCL6c=
+github.com/jhump/protoreflect v1.15.1/go.mod h1:jD/2GMKKE6OqX8qTjhADU1e6DShO+gavG9e0Q693nKo=
 github.com/jinzhu/configor v1.2.2 h1:sLgh6KMzpCmaQB4e+9Fu/29VErtBUqsS2t8C9BNIVsA=
 github.com/jinzhu/configor v1.2.2/go.mod h1:iFFSfOBKP3kC2Dku0ZGB3t3aulfQgTGJknodhFavsU8=
 github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
 github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
 github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
 github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
+github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
 github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
 github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
-github.com/klauspost/cpuid/v2 v2.2.5 h1:0E5MSMDEoAulmXNFquVs//DdoomxaoTY1kUhbc/qbZg=
-github.com/klauspost/cpuid/v2 v2.2.5/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
+github.com/klauspost/cpuid/v2 v2.2.8 h1:+StwCXwm9PdpiEkPyzBXIy+M9KUb4ODm0Zarf1kS5BM=
+github.com/klauspost/cpuid/v2 v2.2.8/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
+github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
-github.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=
 github.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=
+github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
+github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/pty v1.1.3/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
-github.com/leodido/go-urn v1.2.4 h1:XlAE/cm/ms7TE/VMVoduSpNBoyc2dOxHs5MZSwAN63Q=
-github.com/leodido/go-urn v1.2.4/go.mod h1:7ZrI8mTSeBSHl/UaRyKQW1qZeMgak41ANeCNaVckg+4=
-github.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=
-github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
-github.com/microcosm-cc/bluemonday v1.0.26 h1:xbqSvqzQMeEHCqMi64VAs4d8uy6Mequs3rQ0k/Khz58=
-github.com/microcosm-cc/bluemonday v1.0.26/go.mod h1:JyzOCs9gkyQyjs+6h10UEVSe02CGwkhd72Xdqh78TWs=
+github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
+github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/lunixbochs/vtclean v1.0.0/go.mod h1:pHhQNgMf3btfWnGBVipUOjRYhoOsdGqdm/+2c2E2WMI=
+github.com/mailru/easyjson v0.0.0-20190312143242-1de009706dbe/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
+github.com/mattermost/go-i18n v1.11.1-0.20211013152124-5c415071e404 h1:Khvh6waxG1cHc4Cz5ef9n3XVCxRWpAKUtqg9PJl5+y8=
+github.com/mattermost/go-i18n v1.11.1-0.20211013152124-5c415071e404/go.mod h1:RyS7FDNQlzF1PsjbJWHRI35exqaKGSO9qD4iv8QjE34=
+github.com/mattermost/ldap v0.0.0-20231116144001-0f480c025956 h1:Y1Tu/swM31pVwwb2BTCsOdamENjjWCI6qmfHLbk6OZI=
+github.com/mattermost/ldap v0.0.0-20231116144001-0f480c025956/go.mod h1:SRl30Lb7/QoYyohYeVBuqYvvmXSZJxZgiV3Zf6VbxjI=
+github.com/mattermost/logr/v2 v2.0.21 h1:CMHsP+nrbRlEC4g7BwOk1GAnMtHkniFhlSQPXy52be4=
+github.com/mattermost/logr/v2 v2.0.21/go.mod h1:kZkB/zqKL9e+RY5gB3vGpsyenC+TpuiOenjMkvJJbzc=
+github.com/mattermost/mattermost/server/public v0.1.6 h1:k3upRnYfDY9CtVifQ+hQS6ZP4dGsU6I3oG1DCcBYy0c=
+github.com/mattermost/mattermost/server/public v0.1.6/go.mod h1:Dm5uf3z8ckDOKYD1cbnb1Uqm/G9WYIaouSP/HnH+Rbs=
+github.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
+github.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
+github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
+github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
+github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
+github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
+github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
+github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
+github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
+github.com/mhale/smtpd v0.8.3 h1:8j8YNXajksoSLZja3HdwvYVZPuJSqAxFsib3adzRRt8=
+github.com/mhale/smtpd v0.8.3/go.mod h1:MQl+y2hwIEQCXtNhe5+55n0GZOjSmeqORDIXbqUL3x4=
+github.com/microcosm-cc/bluemonday v1.0.1/go.mod h1:hsXNsILzKxV+sX77C5b8FSuKF00vh2OMYv+xgHpAMF4=
+github.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=
+github.com/microcosm-cc/bluemonday v1.0.27/go.mod h1:jFi9vgW+H7c3V0lb6nR74Ib/DIB5OBs92Dimizgw2cA=
+github.com/mitchellh/go-testing-interface v1.14.1 h1:jrgshOhYAUVNMAJiKbEu7EqAwgJJ2JqpQmpLJOu07cU=
+github.com/mitchellh/go-testing-interface v1.14.1/go.mod h1:gfgS7OtZj6MA4U1UrDRp04twqAjfvlZyCfX3sDjEym8=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
 github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
 github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
+github.com/neelance/astrewrite v0.0.0-20160511093645-99348263ae86/go.mod h1:kHJEU3ofeGjhHklVoIGuVj85JJwZ6kWPaJwCIxgnFmo=
+github.com/neelance/sourcemap v0.0.0-20151028013722-8c68805598ab/go.mod h1:Qr6/a/Q4r9LP1IltGz7tA7iOK1WonHEYhu1HRBA7ZiM=
 github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=
+github.com/oklog/run v1.1.0 h1:GEenZ1cK0+q0+wsJew9qUg/DyD8k3JzYsZAi5gYi2mA=
+github.com/oklog/run v1.1.0/go.mod h1:sVPdnTZT1zYwAJeCMu2Th4T21pA3FPOQRfWjQlk7DVU=
+github.com/openzipkin/zipkin-go v0.1.1/go.mod h1:NtoC/o8u3JlF1lSlyPNswIbeQH9bJTmOf0Erfk+hxe8=
 github.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=
 github.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=
-github.com/pelletier/go-toml/v2 v2.0.8 h1:0ctb6s9mE31h0/lhu+J6OPmVeDxJn+kYnJc2jZR9tGQ=
-github.com/pelletier/go-toml/v2 v2.0.8/go.mod h1:vuYfssBdrU2XDZ9bYydBu6t+6a6PYNcZljzZR9VXg+4=
+github.com/pborman/uuid v1.2.1 h1:+ZZIw58t/ozdjRaXh/3awHfmWRbzYxJoAdNJxe/3pvw=
+github.com/pborman/uuid v1.2.1/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=
+github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
+github.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=
+github.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=
+github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
+github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
+github.com/philhofer/fwd v1.1.3-0.20240612014219-fbbf4953d986 h1:jYi87L8j62qkXzaYHAQAhEapgukhenIMZRBKTNRLHJ4=
+github.com/philhofer/fwd v1.1.3-0.20240612014219-fbbf4953d986/go.mod h1:RqIHx9QI14HlwKwm98g9Re5prTQ6LdeRQn+gXJFxsJM=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
-github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
+github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
+github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/prometheus/client_golang v0.8.0/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
+github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/common v0.0.0-20180801064454-c7de2306084e/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=
+github.com/prometheus/procfs v0.0.0-20180725123919-05ee40e3a273/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
 github.com/robfig/cron/v3 v3.0.1 h1:WdRxkvbJztn8LMz/QEvLN5sBU+xKpSqwwUO1Pjr4qDs=
 github.com/robfig/cron/v3 v3.0.1/go.mod h1:eQICP3HwyT7UooqI/z+Ov+PtYAWygg1TEWWzGIFLtro=
 github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
 github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
-github.com/rogpeppe/go-internal v1.8.1 h1:geMPLpDpQOgVyCg5z5GoRwLHepNdb71NXb67XFkP+Eg=
 github.com/rogpeppe/go-internal v1.8.1/go.mod h1:JeRgkft04UBgHMgCIwADu4Pn6Mtm5d4nPKWu0nJ5d+o=
-github.com/samber/lo v1.38.1 h1:j2XEAqXKb09Am4ebOg31SpvzUTTs6EN3VfgeLUhPdXM=
-github.com/samber/lo v1.38.1/go.mod h1:+m/ZKRl6ClXCE2Lgf3MsQlWfh4bn1bz6CXEOxnEXnEA=
+github.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=
+github.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=
+github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=
+github.com/samber/lo v1.47.0 h1:z7RynLwP5nbyRscyvcD043DWYoOcYRv3mV8lBeqOCLc=
+github.com/samber/lo v1.47.0/go.mod h1:RmDH9Ct32Qy3gduHQuKJ3gW1fMHAnE/fAzQuf6He5cU=
 github.com/satori/go.uuid v1.2.0 h1:0uYX9dsZ2yD7q2RtLRtPSdGDWzjeM3TbMJP9utgA0ww=
 github.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=
+github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
 github.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=
 github.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=
+github.com/shurcooL/component v0.0.0-20170202220835-f88ec8f54cc4/go.mod h1:XhFIlyj5a1fBNx5aJTbKoIq0mNaPvOagO+HjB3EtxrY=
+github.com/shurcooL/events v0.0.0-20181021180414-410e4ca65f48/go.mod h1:5u70Mqkb5O5cxEA8nxTsgrgLehJeAw6Oc4Ab1c/P1HM=
+github.com/shurcooL/github_flavored_markdown v0.0.0-20181002035957-2122de532470/go.mod h1:2dOwnU2uBioM+SGy2aZoq1f/Sd1l9OkAeAUvjSyvgU0=
+github.com/shurcooL/go v0.0.0-20180423040247-9e1955d9fb6e/go.mod h1:TDJrrUr11Vxrven61rcy3hJMUqaf/CLWYhHNPmT14Lk=
+github.com/shurcooL/go-goon v0.0.0-20170922171312-37c2f522c041/go.mod h1:N5mDOmsrJOB+vfqUK+7DmDyjhSLIIBnXo9lvZJj3MWQ=
+github.com/shurcooL/gofontwoff v0.0.0-20180329035133-29b52fc0a18d/go.mod h1:05UtEgK5zq39gLST6uB0cf3NEHjETfB4Fgr3Gx5R9Vw=
+github.com/shurcooL/gopherjslib v0.0.0-20160914041154-feb6d3990c2c/go.mod h1:8d3azKNyqcHP1GaQE/c6dDgjkgSx2BZ4IoEi4F1reUI=
+github.com/shurcooL/highlight_diff v0.0.0-20170515013008-09bb4053de1b/go.mod h1:ZpfEhSmds4ytuByIcDnOLkTHGUI6KNqRNPDLHDk+mUU=
+github.com/shurcooL/highlight_go v0.0.0-20181028180052-98c3abbbae20/go.mod h1:UDKB5a1T23gOMUJrI+uSuH0VRDStOiUVSjBTRDVBVag=
+github.com/shurcooL/home v0.0.0-20181020052607-80b7ffcb30f9/go.mod h1:+rgNQw2P9ARFAs37qieuu7ohDNQ3gds9msbT2yn85sg=
+github.com/shurcooL/htmlg v0.0.0-20170918183704-d01228ac9e50/go.mod h1:zPn1wHpTIePGnXSHpsVPWEktKXHr6+SS6x/IKRb7cpw=
+github.com/shurcooL/httperror v0.0.0-20170206035902-86b7830d14cc/go.mod h1:aYMfkZ6DWSJPJ6c4Wwz3QtW22G7mf/PEgaB9k/ik5+Y=
+github.com/shurcooL/httpfs v0.0.0-20171119174359-809beceb2371/go.mod h1:ZY1cvUeJuFPAdZ/B6v7RHavJWZn2YPVFQ1OSXhCGOkg=
+github.com/shurcooL/httpgzip v0.0.0-20180522190206-b1c53ac65af9/go.mod h1:919LwcH0M7/W4fcZ0/jy0qGght1GIhqyS/EgWGH2j5Q=
+github.com/shurcooL/issues v0.0.0-20181008053335-6292fdc1e191/go.mod h1:e2qWDig5bLteJ4fwvDAc2NHzqFEthkqn7aOZAOpj+PQ=
+github.com/shurcooL/issuesapp v0.0.0-20180602232740-048589ce2241/go.mod h1:NPpHK2TI7iSaM0buivtFUc9offApnI0Alt/K8hcHy0I=
+github.com/shurcooL/notifications v0.0.0-20181007000457-627ab5aea122/go.mod h1:b5uSkrEVM1jQUspwbixRBhaIjIzL2xazXp6kntxYle0=
+github.com/shurcooL/octicon v0.0.0-20181028054416-fa4f57f9efb2/go.mod h1:eWdoE5JD4R5UVWDucdOPg1g2fqQRq78IQa9zlOV1vpQ=
+github.com/shurcooL/reactions v0.0.0-20181006231557-f2e0b4ca5b82/go.mod h1:TCR1lToEk4d2s07G3XGfz2QrgHXg4RJBvjrOozvoWfk=
+github.com/shurcooL/sanitized_anchor_name v0.0.0-20170918181015-86672fcb3f95/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
+github.com/shurcooL/users v0.0.0-20180125191416-49c67e49c537/go.mod h1:QJTqeLYEDaXHZDBsXlPCDqdhQuJkuw4NOtaxYe3xii4=
+github.com/shurcooL/webdavfs v0.0.0-20170829043945-18c3829fa133/go.mod h1:hKmq5kWdCj2z2KEozexVbfEZIWiTjhE0+UjmZgPqehw=
+github.com/sourcegraph/annotate v0.0.0-20160123013949-f4cad6c6324d/go.mod h1:UdhH50NIW0fCiwBSr0co2m7BnFLdv4fQTgdqdJTHFeE=
+github.com/sourcegraph/syntaxhighlight v0.0.0-20170531221838-bd320f5d308e/go.mod h1:HuIsMU8RRBOtsCgI77wP899iHVBQpCmg4ErYMZB+2IA=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
+github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
+github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
 github.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
-github.com/stretchr/testify v1.8.3/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
-github.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=
-github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
+github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
+github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/stripe/stripe-go/v73 v73.16.0 h1:X3uTpl3zwY7tSPjcltQJ9t/7TYOgfqT6QQK7Qml995I=
 github.com/stripe/stripe-go/v73 v73.16.0/go.mod h1:Uk0oBh96JHdlxRsu0/t8XfuJ3xOUQTUgpKAFZuDcFnQ=
+github.com/tarm/serial v0.0.0-20180830185346-98f6abe2eb07/go.mod h1:kDXzergiv9cbyO7IOYJZWg1U88JhDg3PB6klq9Hg2pA=
+github.com/tinylib/msgp v1.2.0 h1:0uKB/662twsVBpYUPbokj4sTSKhWFKB7LopO2kWK8lY=
+github.com/tinylib/msgp v1.2.0/go.mod h1:2vIGs3lcUo8izAATNobrCHevYZC/LMsJtw4JPiYPHro=
 github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
 github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
-github.com/ugorji/go/codec v1.2.11 h1:BMaWp1Bb6fHwEtbplGBGJ498wD+LKlNSl25MjdZY4dU=
-github.com/ugorji/go/codec v1.2.11/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
-github.com/wneessen/go-mail v0.3.9 h1:Q4DbCk3htT5DtDWKeMgNXCiHc4bBY/vv/XQPT6XDXzc=
-github.com/wneessen/go-mail v0.3.9/go.mod h1:zxOlafWCP/r6FEhAaRgH4IC1vg2YXxO0Nar9u0IScZ8=
+github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
+github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
+github.com/viant/assertly v0.4.8/go.mod h1:aGifi++jvCrUaklKEKT0BU95igDNaqkvz+49uaYMPRU=
+github.com/viant/toolbox v0.24.0/go.mod h1:OxMCG57V0PXuIP2HNQrtJf2CjqdmbrOx5EkMILuUhzM=
+github.com/vmihailenco/msgpack/v5 v5.4.1 h1:cQriyiUvjTwOHg8QZaPihLWeRAAVoCpE00IUPn0Bjt8=
+github.com/vmihailenco/msgpack/v5 v5.4.1/go.mod h1:GaZTsDaehaPpQVyxrf5mtQlH+pc21PIudVV/E3rRQok=
+github.com/vmihailenco/tagparser/v2 v2.0.0 h1:y09buUbR+b5aycVFQs/g70pqKVZNBmxwAhO7/IwNM9g=
+github.com/vmihailenco/tagparser/v2 v2.0.0/go.mod h1:Wri+At7QHww0WTrCBeu4J6bNtoV6mEfg5OIWRZA9qds=
+github.com/wiggin77/merror v1.0.5 h1:P+lzicsn4vPMycAf2mFf7Zk6G9eco5N+jB1qJ2XW3ME=
+github.com/wiggin77/merror v1.0.5/go.mod h1:H2ETSu7/bPE0Ymf4bEwdUoo73OOEkdClnoRisfw0Nm0=
+github.com/wiggin77/srslog v1.0.1 h1:gA2XjSMy3DrRdX9UqLuDtuVAAshb8bE1NhX1YK0Qe+8=
+github.com/wiggin77/srslog v1.0.1/go.mod h1:fehkyYDq1QfuYn60TDPu9YdY2bB85VUW2mvN1WynEls=
+github.com/wneessen/go-mail v0.4.4 h1:rI8wJzPYymUpUth87vFV3k313bmnid4v+FwhBAYYLFM=
+github.com/wneessen/go-mail v0.4.4/go.mod h1:zxOlafWCP/r6FEhAaRgH4IC1vg2YXxO0Nar9u0IScZ8=
 github.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+go.opencensus.io v0.18.0/go.mod h1:vKdFvxhtzZ9onBp9VKHK8z/sRpBMnKAsufL7wlDrCOA=
 go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
 go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
 go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
-go.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=
 go.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=
+go.uber.org/atomic v1.11.0 h1:ZvwS0R+56ePWxUNi+Atn9dWONBPp/AUETXlHW0DxSjE=
+go.uber.org/atomic v1.11.0/go.mod h1:LUxbIzbOniOlMKjJjyPfpl4v+PKK2cNJn91OQbhoJI0=
+go4.org v0.0.0-20180809161055-417644f6feb5/go.mod h1:MkTOUMDaeVYJUOUsaDXIhWPZYa1yOyC1qaOBpL57BhE=
 golang.design/x/go2generics v0.0.1 h1:wFm9rK9VPSRhKsiuphl1ADeMbwj4zGrGIWSSKQAeY6Y=
 golang.design/x/go2generics v0.0.1/go.mod h1:WJnRrl4mvFvyRTkMZXwz+bUkxlHllPNQYblB6nzJ/q8=
-golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
-golang.org/x/arch v0.3.0 h1:02VY4/ZcO/gBOH6PUaoiptASxtXU10jazRCP865E97k=
-golang.org/x/arch v0.3.0/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
+golang.org/x/arch v0.10.0 h1:S3huipmSclq3PJMNe76NGwkBR504WFkQ5dhzWzP8ZW8=
+golang.org/x/arch v0.10.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
+golang.org/x/build v0.0.0-20190111050920-041ab4dc3f9d/go.mod h1:OWs+y06UdEOHN4y+MfF/py+xQ/tYqIWW03b70/CG9Rw=
+golang.org/x/crypto v0.0.0-20181030102418-4d3f4d9ffa16/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.21.0 h1:X31++rzVUdKhX5sWmSOFZxx8UW/ldWx55cbf08iNAMA=
-golang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=
+golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
+golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
@@ -265,13 +427,12 @@ golang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u0
 golang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
 golang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=
 golang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=
-golang.org/x/exp v0.0.0-20220303212507-bbda1eaf7a17 h1:3MTrJm4PyNL9NBqvYDSj3DHl46qQakyfqfWo4jgfaEM=
-golang.org/x/exp v0.0.0-20220303212507-bbda1eaf7a17/go.mod h1:lgLbSvA5ygNOMpwM/9anMpWVlVJ7Z+cHWq/eFuinpGE=
 golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=
 golang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=
 golang.org/x/image v0.0.0-20191009234506-e7c1f5e7dbb8/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=
-golang.org/x/image v0.18.0 h1:jGzIakQa/ZXI1I0Fxvaa9W7yP25TqT6cHIHn+6CqvSQ=
-golang.org/x/image v0.18.0/go.mod h1:4yyo5vMFQjVjUcVk4jEQcU9MGy/rulF5WvUILseCM2E=
+golang.org/x/image v0.20.0 h1:7cVCUjQwfL18gyBJOmYvptfSHS8Fb3YUDtfLIZ7Nbpw=
+golang.org/x/image v0.20.0/go.mod h1:0a88To4CYVBAHp5FXJm8o7QbUl37Vd85ply1vyD8auM=
+golang.org/x/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
 golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
@@ -292,9 +453,13 @@ golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181029044818-c44066c5c816/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181106065722-10aee1819953/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190313220215-9f648a60d977/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
@@ -316,16 +481,20 @@ golang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/
 golang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
-golang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=
-golang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=
+golang.org/x/net v0.0.0-20220520000938-2e3eb7b945c2/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
+golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
+golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+golang.org/x/oauth2 v0.0.0-20181017192945-9dcd33a902f4/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+golang.org/x/oauth2 v0.0.0-20181203162652-d668ce993890/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
 golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
 golang.org/x/oauth2 v0.0.0-20210323180902-22b0adad7558/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
-golang.org/x/oauth2 v0.9.0 h1:BPpt2kU7oMRq3kCHAA1tbSEshXRw1LpG2ztgDwrzuAs=
-golang.org/x/oauth2 v0.9.0/go.mod h1:qYgFZaFiu6Wg24azG8bdV52QJXJGbZzIIsRCdVKzbLw=
+golang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=
+golang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+golang.org/x/perf v0.0.0-20180704124530-6e6d33e29852/go.mod h1:JLpeXjPJfIyPr5TlbXLkXWLhP8nz10XfvxElABhCtcw=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -335,8 +504,11 @@ golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20181029174526-d69651ed3497/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190316082340-a2f829d7f35f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -347,6 +519,7 @@ golang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -359,21 +532,32 @@ golang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=
-golang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=
+golang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.16.0 h1:a94ExnEXNtEwYLGJSIUxnWoxoRz/ZcCsV63ROupILh4=
-golang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=
+golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
+golang.org/x/text v0.18.0 h1:XvMDiNzPAl0jr17s6W9lcaIhGUfUORdGCNsuLmPG224=
+golang.org/x/text v0.18.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+golang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20181030000716-a0a13e073c7b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
@@ -417,6 +601,9 @@ golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8T
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+google.golang.org/api v0.0.0-20180910000450-7ca32eb868bf/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=
+google.golang.org/api v0.0.0-20181030000543-1d582fd0359e/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=
+google.golang.org/api v0.1.0/go.mod h1:UGEZY7KEX120AnNLIHFMKIo4obdJhkp2tPbaPlQx13Y=
 google.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=
 google.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=
 google.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=
@@ -434,14 +621,18 @@ google.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0M
 google.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=
 google.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=
 google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
+google.golang.org/appengine v1.2.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
+google.golang.org/appengine v1.3.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
 google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
 google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
 google.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=
 google.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
 google.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
-google.golang.org/appengine v1.6.7 h1:FZR1q0exgwxzPzp/aF+VccGrSfxfPpkBqjIIEq3ru6c=
-google.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+google.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+google.golang.org/genproto v0.0.0-20181029155118-b69ba1387ce2/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+google.golang.org/genproto v0.0.0-20181202183823-bd91e49a0898/go.mod h1:7Ep/1NZk928CDR8SjdVbjWNpdIf6nzjE3BTgJDr2Atg=
+google.golang.org/genproto v0.0.0-20190306203927-b5d61aea6440/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
 google.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
 google.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
 google.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
@@ -470,6 +661,11 @@ google.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7Fc
 google.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=
+google.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=
+google.golang.org/grpc v1.16.0/go.mod h1:0JHn/cJsOMiMfNA9+DeHDlAU7KAAB5GDlYFpa9MZMio=
+google.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=
 google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=
@@ -482,6 +678,8 @@ google.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKa
 google.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=
 google.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
 google.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
+google.golang.org/grpc v1.66.0 h1:DibZuoBznOxbDQxRINckZcUvnCEvrW9pcWIE2yF9r1c=
+google.golang.org/grpc v1.66.0/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -492,10 +690,8 @@ google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2
 google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
-google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
-google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=
-google.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=
+google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
+google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
@@ -504,15 +700,24 @@ gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EV
 gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=
 gopkg.in/guregu/null.v3 v3.5.0 h1:xTcasT8ETfMcUHn0zTvIYtQud/9Mx5dJqD554SZct0o=
 gopkg.in/guregu/null.v3 v3.5.0/go.mod h1:E4tX2Qe3h7QdL+uZ3a0vqvYwKQsRSQKM5V4YltdgH9Y=
+gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
+gopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=
+gopkg.in/natefinch/lumberjack.v2 v2.2.1/go.mod h1:YD8tP3GAjkrDg1eZH7EGmyESg/lsYskCTPBJVb9jqSc=
+gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
+gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.0/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
-gorm.io/driver/mysql v1.5.1 h1:WUEH5VF9obL/lTtzjmML/5e6VfFR/788coz2uaVCAZw=
-gorm.io/driver/mysql v1.5.1/go.mod h1:Jo3Xu7mMhCyj8dlrb3WoCaRd1FhsVh+yMXb1jUInf5o=
-gorm.io/gorm v1.25.1 h1:nsSALe5Pr+cM3V1qwwQ7rOkw+6UeLrX5O4v3llhHa64=
-gorm.io/gorm v1.25.1/go.mod h1:L4uxeKpfBml98NYqVqwAdmV1a2nBtAec/cf3fpucW/k=
+gorm.io/driver/mysql v1.5.7 h1:MndhOPYOfEp2rHKgkZIhJ16eVUIRf2HmzgoPmh7FCWo=
+gorm.io/driver/mysql v1.5.7/go.mod h1:sEtPWMiqiN1N1cMXoXmBbd8C6/l+TESwriotuRRpkDM=
+gorm.io/gorm v1.25.7/go.mod h1:hbnx/Oo0ChWMn1BIhpy1oYozzpM15i4YPuHDmfYtwg8=
+gorm.io/gorm v1.25.11 h1:/Wfyg1B/je1hnDx3sMkX+gAlxrlZpn6X0BXRlwXlvHg=
+gorm.io/gorm v1.25.11/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=
+grpc.go4.org v0.0.0-20170609214715-11d0a25b4919/go.mod h1:77eQGdRu53HpSqPFJFmuJdjuHRquDANNeA4x7B8WQ9o=
+honnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
@@ -520,7 +725,11 @@ honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWh
 honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=
 honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
+nhooyr.io/websocket v1.8.10 h1:mv4p+MnGrLDcPlBoWsvPP7XCzTYMXP9F9eIGoKbgx7Q=
+nhooyr.io/websocket v1.8.10/go.mod h1:rN9OFWIUwuxg4fR5tELlYC04bXYowCP9GX47ivo2l+c=
+nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
 rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=
-rsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=
 rsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=
 rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
+sourcegraph.com/sourcegraph/go-diff v0.5.0/go.mod h1:kuch7UrkMzY0X+p9CRK03kfuPQ2zzQcaEFbx8wA8rck=
+sourcegraph.com/sqs/pbtypes v0.0.0-20180604144634-d3ebe8f20ae4/go.mod h1:ketZ/q3QxT9HOBeFhu6RdvsftgpsbFHBF5Cas6cDKZ0=
diff --git a/server/internal/app/auth/auth.go b/server/internal/app/auth/auth.go
index da14f904..cf36ff62 100644
--- a/server/internal/app/auth/auth.go
+++ b/server/internal/app/auth/auth.go
@@ -18,6 +18,8 @@ const (
 	AuthState4RootUser       = 4
 )
 
+// if the minimumAuthState is higher than 1AnyUser, AddUserChainsToObject is called
+//
 // There are 4 different states to authenticate
 // 0. Guest - this middleware is then not required
 // 1. User of a different/unknown chain
diff --git a/server/internal/app/chat.go b/server/internal/app/chat.go
new file mode 100644
index 00000000..0ddb9913
--- /dev/null
+++ b/server/internal/app/chat.go
@@ -0,0 +1,29 @@
+package app
+
+// "github.com/ascii8/nakama-go"
+
+// var ChatClient *nakama.Client
+
+// func ChatInit() {
+
+// 	if Config.NAKAMA_SERVER_KEY == "" {
+// 		panic("NAKAMA_SERVER_KEY is required")
+// 	}
+
+// 	ChatClient = ChatCreateClient()
+
+// 	ctx := context.TODO()
+
+// 	err := ChatClient.Healthcheck(ctx)
+// 	if err != nil {
+// 		slog.Error("unable to ping nakama", "err", err)
+// 		panic(err)
+// 	} else {
+// 		slog.Info("ping nakama received")
+// 	}
+// }
+
+// func ChatCreateClient() *nakama.Client {
+// 	c := nakama.New(nakama.WithServerKey(Config.NAKAMA_SERVER_KEY), nakama.WithURL(Config.NAKAMA_URL))
+// 	return c
+// }
diff --git a/server/internal/app/config.go b/server/internal/app/config.go
index f0f53168..c22d68cb 100644
--- a/server/internal/app/config.go
+++ b/server/internal/app/config.go
@@ -3,7 +3,6 @@ package app
 import (
 	"encoding/base64"
 	"flag"
-	"fmt"
 	"log/slog"
 	"os"
 
@@ -48,6 +47,12 @@ var Config struct {
 	ONESIGNAL_REST_API_KEY  string `yaml:"onesignal_rest_api_key" env:"ONESIGNAL_REST_API_KEY"`
 	APPSTORE_REVIEWER_EMAIL string `yaml:"appstore_reviewer_email" env:"APPSTORE_REVIEWER_EMAIL"`
 	IMAGES_DIR              string `yaml:"images_dir" env:"IMAGES_DIR"`
+	// MM_URL                  string `yaml:"mattermost_url" env:"MM_URL"`
+	// MM_TOKEN                string `yaml:"mattermost_token" env:"MM_TOKEN"`
+	// MM_SMTP_HOST            string `yaml:"mattermost_smtp_host" env:"MM_SMTP_HOST"`
+	// MM_SMTP_PORT            string `yaml:"mattermost_smtp_port" env:"MM_SMTP_PORT"`
+	NAKAMA_URL        string `yaml:"nakama_url" env:"NAKAMA_URL"`
+	NAKAMA_SERVER_KEY string `yaml:"nakama_server_key" env:"NAKAMA_SERVER_KEY"`
 }
 
 func ConfigInit(pwd string, files ...string) {
@@ -76,22 +81,11 @@ func ConfigInit(pwd string, files ...string) {
 		Config.JWT_SECRET = string(b)
 	}
 
-	// var fname string
-	// switch env {
-	// case EnvEnumDevelopment:
-	// 	fname = "config.dev.yml"
-	// case EnvEnumTesting:
-	// 	fname = "config.test.yml"
-	// case EnvEnumAcceptance:
-	// 	fname = "config.acc.yml"
-	// case EnvEnumProduction:
-	// 	fname = "config.prod.yml"
-	// }
-
-	if Config.JWT_SECRET == "" {
-		panic(fmt.Errorf("no jwt secret in config file: %s", *fFile))
-	}
 	stripe.Key = Config.STRIPE_SECRET_KEY
+	if Config.ENV == "" {
+		slog.Error("Config ENV is empty")
+		os.Exit(1)
+	}
 }
 
 func ConfigTestInit(path string) {
diff --git a/server/internal/app/database.go b/server/internal/app/database.go
index fe3fab5b..862ddfb1 100644
--- a/server/internal/app/database.go
+++ b/server/internal/app/database.go
@@ -15,6 +15,10 @@ import (
 var Cache *cache.Cache
 
 func DatabaseInit() *gorm.DB {
+	if Config.DB_HOST == "" {
+		panic(fmt.Errorf("database is not specified in config"))
+	}
+
 	// refer https://github.com/go-sql-driver/mysql#dsn-data-source-name for details
 	dsn := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local", Config.DB_USER, Config.DB_PASS, Config.DB_HOST, Config.DB_PORT, Config.DB_NAME)
 	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
diff --git a/server/internal/app/onesignal.go b/server/internal/app/onesignal.go
index 04e9f42e..df38fcc3 100644
--- a/server/internal/app/onesignal.go
+++ b/server/internal/app/onesignal.go
@@ -43,6 +43,10 @@ func (e OneSignalErrorResponse) GetInvalidExternalUserIds() []string {
 var OneSignalClient *onesignal.APIClient
 
 func OneSignalInit() {
+	if Config.ONESIGNAL_REST_API_KEY == "" {
+		return
+	}
+
 	configuration := onesignal.NewConfiguration()
 	OneSignalClient = onesignal.NewAPIClient(configuration)
 }
@@ -56,6 +60,7 @@ const notificationUserLimit = 15
 // Chunk notifications
 func OneSignalCreateNotification(db *gorm.DB, userUIDs []string, notificationTitle, notificationContent onesignal.StringMap) error {
 	if OneSignalClient == nil {
+		slog.Info("Send onesignal notification", "userids", userUIDs, "title", *notificationTitle.En)
 		return nil
 	}
 	lenUserUIDs := len(userUIDs)
diff --git a/server/internal/controllers/bulky_item.go b/server/internal/controllers/bulky_item.go
index f4b03d52..1f957626 100644
--- a/server/internal/controllers/bulky_item.go
+++ b/server/internal/controllers/bulky_item.go
@@ -47,6 +47,7 @@ WHERE user_chain_id IN (
 	SELECT uc2.id FROM user_chains AS uc2
 	WHERE uc2.chain_id = ?
 )
+ORDER BY bulky_items.created_at DESC
 	`, chain.ID).Scan(&bulkyItems).Error
 	if err != nil {
 		slog.Error("Unable to find bulky items", "err", err)
diff --git a/server/internal/controllers/chain.go b/server/internal/controllers/chain.go
index d78241bc..20746bf2 100644
--- a/server/internal/controllers/chain.go
+++ b/server/internal/controllers/chain.go
@@ -137,7 +137,8 @@ func ChainGet(c *gin.Context) {
 	}
 	if query.AddIsAppDisabled {
 		sql += `,
-		chains.is_app_disabled`
+		chains.is_app_disabled,
+		chains.chat_room_ids`
 	}
 	if query.AddRoutePrivacy {
 		sql += `,
@@ -183,6 +184,7 @@ func ChainGet(c *gin.Context) {
 	}
 	if query.AddIsAppDisabled {
 		body.IsAppDisabled = &chain.IsAppDisabled
+		body.ChatRoomIDs = chain.ChatRoomIDs
 	}
 	if query.AddRoutePrivacy {
 		body.RoutePrivacy = &chain.RoutePrivacy
@@ -451,7 +453,7 @@ func ChainDelete(c *gin.Context) {
 
 	httperr := services.ChainDelete(db, chain)
 	if httperr != nil {
-		c.AbortWithError(httperr.Status, httperr)
+		httperr.StatusWithError(c)
 		return
 	}
 }
diff --git a/server/internal/controllers/chat.go b/server/internal/controllers/chat.go
new file mode 100644
index 00000000..b29ac0d2
--- /dev/null
+++ b/server/internal/controllers/chat.go
@@ -0,0 +1,129 @@
+package controllers
+
+import (
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+	"github.com/the-clothing-loop/website/server/internal/app/auth"
+	"github.com/the-clothing-loop/website/server/internal/services"
+)
+
+func ChatPatchUserPassword(c *gin.Context) {
+	db := getDB(c)
+
+	ok, user, _ := auth.Authenticate(c, db, auth.AuthState1AnyUser, "")
+	if !ok {
+		return
+	}
+
+	err := services.ChatPatchUser(db, c.Request.Context(), user)
+	if err != nil {
+		c.String(http.StatusInternalServerError, err.Error())
+		return
+	}
+
+	// if !user.ChatPass.Valid {
+	// 	p, _ := atoll.NewPassword(16, []atoll.Level{atoll.Digit, atoll.Lower, atoll.Upper})
+	// 	password := string(p)
+
+	// 	user.ChatPass = null.StringFrom(password)
+	// 	db.Exec(`UPDATE users SET chat_pass = ? WHERE id = ?`,
+	// 		user.ChatPass.String,
+	// 		user.ID)
+	// }
+
+	// if user.ChatPass.String == "" {
+	// 	c.AbortWithError(http.StatusTeapot, fmt.Errorf("password is not set"))
+	// 	return
+	// }
+
+	json := gin.H{
+		"chat_user_id": user.ChatUserID,
+		"chat_pass":    user.ChatPass.String,
+	}
+	c.JSON(http.StatusOK, json)
+}
+
+func ChatCreateGroup(c *gin.Context) {
+	db := getDB(c)
+
+	var body struct {
+		ChainUID  string `json:"chain_uid" binding:"required,uuid"`
+		ChannelID string `json:"group_id" binding:"required"`
+	}
+	if err := c.ShouldBindJSON(&body); err != nil {
+		c.AbortWithError(http.StatusBadRequest, err)
+		return
+	}
+
+	ok, _, chain := auth.Authenticate(c, db, auth.AuthState3AdminChainUser, body.ChainUID)
+	if !ok {
+		return
+	}
+
+	err := services.ChatCreateChannel(db, chain, body.ChannelID)
+	if err != nil {
+		c.AbortWithError(http.StatusInternalServerError, err)
+		return
+	}
+
+	c.Status(http.StatusOK)
+}
+
+func ChatDeleteChannel(c *gin.Context) {
+	db := getDB(c)
+
+	var body struct {
+		ChainUID  string `json:"chain_uid" binding:"required,uuid"`
+		ChannelID string `json:"group_id" binding:"required"`
+	}
+	if err := c.ShouldBindJSON(&body); err != nil {
+		c.AbortWithError(http.StatusBadRequest, err)
+		return
+	}
+
+	ok, _, chain := auth.Authenticate(c, db, auth.AuthState3AdminChainUser, body.ChainUID)
+	if !ok {
+		return
+	}
+
+	err := services.ChatDeleteChannel(db, c.Request.Context(), chain, body.ChannelID)
+	if err != nil {
+		c.AbortWithError(http.StatusInternalServerError, err)
+		return
+	}
+
+	c.Status(http.StatusOK)
+}
+
+// func ChatJoinChannels(c *gin.Context) {
+// 	db := getDB(c)
+
+// 	var body struct {
+// 		ChainUID    string `json:"chain_uid" binding:"required,uuid"`
+// 		ChatGroupID string `json:"chat_group_id" binding:"required"`
+// 	}
+// 	if err := c.ShouldBindJSON(&body); err != nil {
+// 		c.AbortWithError(http.StatusBadRequest, err)
+// 		return
+// 	}
+
+// 	ok, user, chain := auth.Authenticate(c, db, auth.AuthState2UserOfChain, body.ChainUID)
+// 	if !ok {
+// 		return
+// 	}
+
+// 	_, isChainAdmin := user.IsPartOfChain(chain.UID)
+// 	if !isChainAdmin && len(chain.ChatRoomIDs) == 0 {
+// 		c.String(http.StatusExpectationFailed, "The Loop host must first enable chat")
+// 		return
+// 	}
+
+// 	for _, mmChannelId := range chain.ChatRoomIDs {
+// 		err := services.ChatJoinChannel(db, c.Request.Context(), chain, user, isChainAdmin, mmChannelId)
+// 		if err != nil {
+// 			httperror.New(http.StatusInternalServerError, err).StatusWithError(c)
+// 			return
+// 		}
+// 	}
+// }
diff --git a/server/internal/models/bulky_item.go b/server/internal/models/bulky_item.go
index 261f2902..c68d020d 100644
--- a/server/internal/models/bulky_item.go
+++ b/server/internal/models/bulky_item.go
@@ -2,6 +2,8 @@ package models
 
 import (
 	"time"
+
+	"gorm.io/gorm"
 )
 
 type BulkyItem struct {
@@ -14,3 +16,26 @@ type BulkyItem struct {
 	UserUID     string    `json:"user_uid" gorm:"-:migration;<-:false"`
 	CreatedAt   time.Time `json:"created_at"`
 }
+
+func GetAllBulkyItemsByChain(db *gorm.DB, chainID uint) ([]BulkyItem, error) {
+	res := []BulkyItem{}
+	err := db.Raw(`
+SELECT * FROM bulky_items
+WHERE user_chain_id IN (
+	SELECT UNIQUE(chain_id) FROM user_chains
+	WHERE chain_id = ?
+)
+	`, chainID).Scan(&res).Error
+	if err != nil {
+		return nil, err
+	}
+	return res, nil
+}
+
+func RemoveSelectedBulkyItems(db *gorm.DB, bulkyItems []BulkyItem) error {
+	bulkyItemIDs := []uint{}
+	for _, bulkyItem := range bulkyItems {
+		bulkyItemIDs = append(bulkyItemIDs, bulkyItem.ID)
+	}
+	return db.Exec("DELETE FROM bulky_items WHERE id IN ?", bulkyItemIDs).Error
+}
diff --git a/server/internal/models/chain.go b/server/internal/models/chain.go
index 68894736..a0e3f523 100644
--- a/server/internal/models/chain.go
+++ b/server/internal/models/chain.go
@@ -2,6 +2,7 @@ package models
 
 import (
 	"database/sql"
+	"encoding/json"
 	"errors"
 	"time"
 
@@ -42,6 +43,7 @@ type Chain struct {
 	RoutePrivacy                  int
 	LastAbandonedAt               sql.NullTime
 	LastAbandonedRecruitmentEmail sql.NullTime
+	ChatRoomIDs                   []string `gorm:"column:chat_room_ids;serializer:json"`
 }
 
 type ChainResponse struct {
@@ -64,6 +66,7 @@ type ChainResponse struct {
 	Theme            *string  `json:"theme,omitempty" gorm:"chains.theme"`
 	IsAppDisabled    *bool    `json:"is_app_disabled,omitempty" gorm:"chains.is_app_disabled"`
 	RoutePrivacy     *int     `json:"route_privacy,omitempty" gorm:"chains.route_privacy"`
+	ChatRoomIDs      []string `json:"chat_room_ids,omitempty" gorm:"chains.chat_room_ids"`
 	AllowMap         *bool    `json:"allow_map,omitempty" gorm:"chains.allow_map"`
 }
 
@@ -290,3 +293,11 @@ func ChainCheckIfExist(db *gorm.DB, ChainUID string, checkIfIsOpenToNewMembers b
 
 	return row.ID, true, nil
 }
+
+func (c *Chain) SaveChannelIDs(db *gorm.DB) error {
+	b, err := json.Marshal(c.ChatRoomIDs)
+	if err != nil {
+		return err
+	}
+	return db.Exec(`UPDATE chains SET chat_room_ids = ? WHERE id = ?`, string(b), c.ID).Error
+}
diff --git a/server/internal/models/user.go b/server/internal/models/user.go
index 16308fdf..917d90f2 100644
--- a/server/internal/models/user.go
+++ b/server/internal/models/user.go
@@ -47,6 +47,8 @@ type User struct {
 	AcceptedTOHJSON       *bool           `json:"accepted_toh,omitempty" gorm:"-:migration;<-:false"`
 	AcceptedDPAJSON       *bool           `json:"accepted_dpa,omitempty" gorm:"-:migration;<-:false"`
 	NotificationChainUIDs []string        `json:"notification_chain_uids,omitempty" gorm:"-"`
+	ChatUserID            null.String     `json:"-"`
+	ChatPass              null.String     `json:"-"`
 }
 
 func (u *User) AddUserChainsToObject(db *gorm.DB) error {
diff --git a/server/internal/models/user_chain.go b/server/internal/models/user_chain.go
index e373da5c..3904a728 100644
--- a/server/internal/models/user_chain.go
+++ b/server/internal/models/user_chain.go
@@ -68,8 +68,8 @@ func (u *User) DeleteOrPassOnUserChainBags(db *gorm.DB, chainID uint) (err error
 	}{}
 	err = db.Raw(`
 SELECT id, user_chain_id FROM bags WHERE user_chain_id IN (
-	SELECT id from user_chains WHERE user_id = ?	AND chain_id = ?
-)`, u.ID, chainID).Scan(&bags).Error
+	SELECT id from user_chains WHERE user_id = ?	
+)`, u.ID).Scan(&bags).Error
 	if err != nil {
 		return fmt.Errorf("Error to selecting bags: %v", err)
 	}
diff --git a/server/internal/server.go b/server/internal/server.go
index 5053d857..0c69aa3c 100644
--- a/server/internal/server.go
+++ b/server/internal/server.go
@@ -14,9 +14,11 @@ import (
 var Scheduler *cron.Scheduler
 
 func Routes() *gin.Engine {
+	slog.SetLogLoggerLevel(slog.LevelDebug)
 	// initialization
 	db := app.DatabaseInit()
 	app.MailInit()
+	// app.ChatInit()
 
 	if app.Config.ENV == app.EnvEnumProduction || (app.Config.SENDINBLUE_API_KEY != "" && app.Config.ENV == app.EnvEnumDevelopment) {
 		app.BrevoInit()
@@ -142,6 +144,12 @@ func Routes() *gin.Engine {
 	v2.GET("/chain/user/note", controllers.ChainGetUserNote)
 	v2.PATCH("/chain/user/warden", controllers.ChainChangeUserWarden)
 
+	// chat
+	v2.PATCH("/chat/user/password", controllers.ChatPatchUserPassword)
+	v2.POST("/chat/group/create", controllers.ChatCreateGroup)
+	// v2.POST("/chat/group/join", controllers.ChatJoinChannels)
+	v2.POST("/chat/group/delete", controllers.ChatDeleteChannel)
+
 	// bag
 	v2.GET("/bag/all", controllers.BagGetAll)
 	v2.PUT("/bag", controllers.BagPut)
diff --git a/server/internal/services/chat.go b/server/internal/services/chat.go
new file mode 100644
index 00000000..54e2f747
--- /dev/null
+++ b/server/internal/services/chat.go
@@ -0,0 +1,118 @@
+package services
+
+import (
+	"context"
+	"log/slog"
+	"regexp"
+	"strings"
+
+	"github.com/GGP1/atoll"
+	"github.com/samber/lo"
+	"github.com/the-clothing-loop/website/server/internal/models"
+	"gopkg.in/guregu/null.v3"
+	"gorm.io/gorm"
+)
+
+// Checks if the user is registered on the matrix server if not they are registered
+func ChatPatchUser(db *gorm.DB, ctx context.Context, user *models.User) error {
+	if user.ChatPass.Valid {
+		return nil
+	}
+
+	slog.Info("create Chat user if does not exist")
+
+	p, _ := atoll.NewPassword(16, []atoll.Level{atoll.Digit, atoll.Lower, atoll.Upper})
+	password := string(p)
+	user.ChatPass = null.StringFrom(password)
+	return db.Exec(`UPDATE users SET chat_user_id = ?, chat_pass = ? WHERE id = ?`,
+		user.ChatUserID.String,
+		user.ChatPass.String,
+		user.ID).Error
+}
+
+func ChatCreateChannel(db *gorm.DB, chain *models.Chain, mmChannelID string) error {
+
+	// group, err := app.ChatClient.CreateGroup(ctx, &nakama.CreateGroupRequest{
+	// 	Name:        name,
+	// 	Description: "",
+	// 	LangTag:     "",
+	// 	AvatarUrl:   "",
+	// 	Open:        false,
+	// 	MaxCount:    0,
+	// })
+	// if err != nil {
+	// 	return nil, err
+	// }
+
+	// err = app.ChatClient.AddGroupUsers(ctx, group.Id, mmUserId)
+	// if err != nil {
+	// 	return nil, err
+	// }
+
+	chain.ChatRoomIDs = append(chain.ChatRoomIDs, mmChannelID)
+	return chain.SaveChannelIDs(db)
+}
+
+func ChatDeleteChannel(db *gorm.DB, ctx context.Context, chain *models.Chain, mmChannelID string) error {
+	// err := app.ChatClient.DeleteGroup(ctx, mmChannelID)
+	// if err != nil {
+	// 	return err
+	// }
+
+	chain.ChatRoomIDs = lo.Filter(chain.ChatRoomIDs, func(roomID string, _ int) bool {
+		return roomID != mmChannelID
+	})
+	return chain.SaveChannelIDs(db)
+}
+
+// func chatChannelAddUser(ctx context.Context, mmChannelId string, mmUserId string, setRoleAdmin bool) error {
+// 	err := app.ChatClient.AddGroupUsers(ctx, mmChannelId, mmUserId)
+// 	if err != nil {
+// 		return err
+// 	}
+
+// 	return chatChannelSetMemberRole(ctx, mmChannelId, mmUserId, setRoleAdmin)
+// }
+
+// func chatChannelSetMemberRole(ctx context.Context, mmChannelId, mmUserId string, setRoleAdmin bool) error {
+// 	var err error
+// 	if setRoleAdmin {
+// 		err = app.ChatClient.PromoteGroupUsers(ctx, mmChannelId, mmUserId)
+// 	} else {
+// 		err = app.ChatClient.DemoteGroupUsers(ctx, mmChannelId, mmUserId)
+// 	}
+// 	return err
+// }
+
+// func ChatJoinChannel(db *gorm.DB, ctx context.Context, chain *models.Chain, user *models.User, isChainAdmin bool, mmChannelId string) error {
+// 	if user.ChatUserID.String == "" {
+// 		return fmt.Errorf("You must be registered on our chat server before joining a room")
+// 	}
+
+// 	if len(chain.ChatRoomIDs) == 0 || !lo.Contains(chain.ChatRoomIDs, mmChannelId) {
+// 		return fmt.Errorf("Channel does not exist in this Loop")
+// 	}
+
+// 	// Check if room already contains user
+// 	client2 := app.ChatCreateClient()
+// 	ctx2 := context.Background()
+// 	err := client2.AuthenticateEmail(ctx, user.Email.String, user.ChatPass.String, false, user.Name)
+// 	if err != nil {
+// 		return err
+// 	}
+// 	client2.JoinGroup(ctx2, mmChannelId)
+// 	if isChainAdmin {
+// 		err = app.ChatClient.PromoteGroupUsers(ctx, mmChannelId, user.ChatUserID.String)
+// 		if err != nil {
+// 			return err
+// 		}
+// 	}
+
+// 	return nil
+// }
+
+var reChatValidateUniqueName = regexp.MustCompile("[^a-z0-9]")
+
+func ChatValidateUniqueName(name string) string {
+	return reChatValidateUniqueName.ReplaceAllString(strings.ToLower(name), "")
+}
diff --git a/server/internal/services/chat_test.go b/server/internal/services/chat_test.go
new file mode 100644
index 00000000..7cd72711
--- /dev/null
+++ b/server/internal/services/chat_test.go
@@ -0,0 +1,15 @@
+package services_test
+
+import (
+	"testing"
+
+	"github.com/GGP1/atoll"
+	"github.com/stretchr/testify/assert"
+)
+
+func TestPasswordGen(t *testing.T) {
+	p, _ := atoll.NewPassword(16, []atoll.Level{atoll.Digit, atoll.Lower, atoll.Upper})
+	password := string(p)
+
+	assert.NotEmpty(t, password)
+}
diff --git a/server/internal/services/test/chat_e2e_test.go b/server/internal/services/test/chat_e2e_test.go
new file mode 100644
index 00000000..a63d065b
--- /dev/null
+++ b/server/internal/services/test/chat_e2e_test.go
@@ -0,0 +1,51 @@
+//go:build !ci
+
+package services_test
+
+import (
+	"context"
+	"testing"
+
+	"github.com/ascii8/nakama-go"
+	"github.com/jaswdr/faker"
+	"github.com/stretchr/testify/assert"
+)
+
+var Faker = faker.New()
+
+func TestNakama(t *testing.T) {
+	l1 := NewLifeTime()
+	l2 := NewLifeTime()
+
+	name := Faker.Person().Name()
+	pass := Faker.RandomStringWithLength(30)
+
+	err := l1.CreateNewUser(name, pass)
+	assert.Empty(t, err)
+	a1, err := l1.Client.Account(l2.ctx)
+	assert.Empty(t, err)
+
+	err = l2.CreateNewUser(name, pass)
+	assert.Empty(t, err)
+	a2, err := l2.Client.Account(l2.ctx)
+	assert.Empty(t, err)
+
+	assert.Equal(t, a1.User.Id, a2.User.Id)
+}
+
+type LifeTime struct {
+	Client *nakama.Client
+	ctx    context.Context
+}
+
+func NewLifeTime() *LifeTime {
+	cl := nakama.New(nakama.WithServerKey("defaultkey"), nakama.WithURL("http://localhost:7350"))
+	return &LifeTime{
+		Client: cl,
+		ctx:    context.Background(),
+	}
+}
+
+func (l *LifeTime) CreateNewUser(name, password string) error {
+	return l.Client.AuthenticateCustom(l.ctx, password, true, name)
+}
diff --git a/server/internal/views/notifications.go b/server/internal/views/notifications.go
index 7f2f9627..9ee7a927 100644
--- a/server/internal/views/notifications.go
+++ b/server/internal/views/notifications.go
@@ -8,22 +8,28 @@ const (
 	NotificationEnumTitleNewBulkyCreated = "NOTIFICATION_TITLE_NEW_BULKY_CREATED"
 	NotificationEnumTitleBagTooOld       = "NOTIFICATION_TITLE_BAG_TOO_OLD"
 	NotificationEnumTitleBagAssignedYou  = "NOTIFICATION_TITLE_BAG_ASSIGNED_YOU"
+	NotificationEnumTitleChatMessage     = "NOTIFICATION_TITLE_CHAT_MESSAGE"
 )
 
 // TODO: Remove this and use json files instead
 var Notifications map[string]*onesignal.StringMap = map[string]*onesignal.StringMap{
 	NotificationEnumTitleNewBulkyCreated: {
 		En: onesignal.PtrString("A new bulky item has been created"),
-		// Nl: onesignal.PtrString(),
+		Nl: onesignal.PtrString("Er is een nieuw groot voorwerp aangemaakt"),
 	},
 
 	NotificationEnumTitleBagTooOld: {
 		En: onesignal.PtrString("The bag you are holding has been in your possession for too long"),
-		// Nl: "",
+		Nl: onesignal.PtrString("De tas die u vasthoudt, is te lang in uw bezit geweest"),
 	},
 
 	NotificationEnumTitleBagAssignedYou: {
 		En: onesignal.PtrString("A bag has been assigned to you"),
-		// Nl: "",
+		Nl: onesignal.PtrString("Er is u een tas toegewezen"),
+	},
+
+	NotificationEnumTitleChatMessage: {
+		En: onesignal.PtrString("You have a message in chat"),
+		Nl: onesignal.PtrString("Je hebt een bericht in de chat"),
 	},
 }
diff --git a/server/pkg/httperror/httperror.go b/server/pkg/httperror/httperror.go
index 2176e911..3b99154d 100644
--- a/server/pkg/httperror/httperror.go
+++ b/server/pkg/httperror/httperror.go
@@ -2,16 +2,39 @@ package httperror
 
 import (
 	"fmt"
+	"log/slog"
+
+	"github.com/gin-gonic/gin"
 )
 
 type HttpError struct {
-	error
+	Error  error
 	Status int
 }
 
-func New(status int, message string, a ...any) *HttpError {
+func New(status int, errOrMessage any) *HttpError {
+	var err error
+	if e, ok := errOrMessage.(error); ok {
+		err = e
+	} else {
+		err = fmt.Errorf(errOrMessage.(string))
+	}
+
 	return &HttpError{
-		error:  fmt.Errorf(message, a...),
+		Error:  err,
 		Status: status,
 	}
 }
+
+func (e *HttpError) StatusWithError(c *gin.Context) {
+	c.Error(e.Error)
+	errStr := e.Error.Error()
+	if 100 <= e.Status && e.Status < 300 {
+		slog.Info("http error", "status", e.Status, "err", e.Error)
+	} else if 300 <= e.Status && e.Status < 400 {
+		slog.Warn("http error", "status", e.Status, "err", e.Error)
+	} else {
+		slog.Error("http error", "status", e.Status, "err", e.Error)
+	}
+	c.String(e.Status, errStr)
+}
diff --git a/server/pkg/httperror/httperror_test.go b/server/pkg/httperror/httperror_test.go
index 5a8c504a..023bb276 100644
--- a/server/pkg/httperror/httperror_test.go
+++ b/server/pkg/httperror/httperror_test.go
@@ -9,6 +9,6 @@ import (
 
 func TestNewHttpErrorf(t *testing.T) {
 	err := New(http.StatusConflict, "hi")
-	assert.Equal(t, err.Error(), "hi")
+	assert.Equal(t, err.Error.Error(), "hi")
 	assert.Equal(t, err.Status, http.StatusConflict)
 }
